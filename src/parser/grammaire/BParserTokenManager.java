/* Generated By:JJTree&JavaCC: Do not edit this line. BParserTokenManager.java */
/*****************************************************************************
*
* (C) 2003  B. TATIBOUET - Université de Franche-Comté
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
******************************************************************************/

package parser.grammaire;
import java.io.* ;

import parser.noeud.AfterParserException;
import parser.noeud.BParserException;
import parser.noeud.Noeud;

/** Token Manager. */
public class BParserTokenManager implements BParserConstants
{

  /** Debug output. */
  public static  PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1000L) != 0L)
            return 19;
         if ((active0 & 0xfffffffffffe0L) != 0L || (active1 & 0x8004340000000000L) != 0L || (active2 & 0x1ffffffffffffL) != 0L)
         {
            jjmatchedKind = 177;
            return 8;
         }
         if ((active1 & 0x1000000000L) != 0L)
            return 20;
         return -1;
      case 1:
         if ((active0 & 0xbba7f5fbefee0L) != 0L || (active1 & 0x8004300000000000L) != 0L || (active2 & 0x1f9ffffdffcffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 1;
            }
            return 8;
         }
         if ((active0 & 0x44580a0410100L) != 0L || (active1 & 0x40000000000L) != 0L || (active2 & 0x60000200300L) != 0L)
            return 8;
         return -1;
      case 2:
         if ((active0 & 0x2ba2f3ffffda0L) != 0L || (active1 & 0x8000200000000000L) != 0L || (active2 & 0x1f811fe9cf0e1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 2;
            }
            return 8;
         }
         if ((active0 & 0x9005040000240L) != 0L || (active1 & 0x4100000000000L) != 0L || (active2 & 0x7ee01430d1eL) != 0L)
            return 8;
         return -1;
      case 3:
         if ((active0 & 0xa8a2a3fffdf20L) != 0L || (active2 & 0x1d580501071e0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 3;
            }
            return 8;
         }
         if ((active0 & 0x300500002080L) != 0L || (active1 & 0x8000200000000000L) != 0L || (active2 & 0x2851af8c8019L) != 0L)
            return 8;
         return -1;
      case 4:
         if ((active0 & 0x2002220000000L) != 0L || (active2 & 0x1000521001e0L) != 0L)
            return 8;
         if ((active0 & 0x88a081fffdf20L) != 0L || (active2 & 0x1c58000007000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 4;
            return 8;
         }
         return -1;
      case 5:
         if ((active0 & 0x8a0810200800L) != 0L || (active2 & 0x1c00000000000L) != 0L)
            return 8;
         if ((active0 & 0x800000fdfd720L) != 0L || (active2 & 0x58000007000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 5;
            }
            return 8;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000005000020L) != 0L || (active2 & 0x58000007000L) != 0L)
            return 8;
         if ((active0 & 0xaffd700L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 6;
            }
            return 8;
         }
         return -1;
      case 7:
         if ((active0 & 0x10000L) != 0L || (active2 & 0x10000004000L) != 0L)
            return 8;
         if ((active0 & 0xafed700L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 7;
            return 8;
         }
         return -1;
      case 8:
         if ((active0 & 0x4300L) != 0L)
            return 8;
         if ((active0 & 0xafe9400L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 8;
            return 8;
         }
         return -1;
      case 9:
         if ((active0 & 0xa08400L) != 0L)
            return 8;
         if ((active0 & 0xa5e1000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 9;
            return 8;
         }
         return -1;
      case 10:
         if ((active0 & 0x25e0000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 10;
            return 8;
         }
         if ((active0 & 0x8001000L) != 0L)
            return 8;
         return -1;
      case 11:
         if ((active0 & 0x25e0000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 11;
            return 8;
         }
         return -1;
      case 12:
         if ((active0 & 0x25e0000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 12;
            return 8;
         }
         return -1;
      case 13:
         if ((active0 & 0x2400000L) != 0L)
            return 8;
         if ((active0 & 0x1e0000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 13;
            return 8;
         }
         return -1;
      case 14:
         if ((active0 & 0x1e0000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 14;
            return 8;
         }
         return -1;
      case 15:
         if ((active0 & 0x1e0000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 15;
            return 8;
         }
         return -1;
      case 16:
         if ((active0 & 0x1e0000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 16;
            return 8;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 97);
      case 35:
         return jjStopAtPos(0, 98);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 95);
      case 38:
         return jjStopAtPos(0, 107);
      case 40:
         return jjStopAtPos(0, 103);
      case 41:
         return jjStopAtPos(0, 104);
      case 42:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L, 0x0L);
      case 43:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xcL, 0x0L);
      case 44:
         return jjStopAtPos(0, 105);
      case 45:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200030L, 0x0L);
      case 46:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L, 0x0L);
      case 47:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x7200000000000004L, 0x400000040800000L, 0x0L);
      case 58:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000800L, 0x0L);
      case 59:
         return jjStopAtPos(0, 126);
      case 60:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x89c0000000000000L, 0x498402L, 0x0L);
      case 61:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x4000000L, 0x0L);
      case 62:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1003c1L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1800340000L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x8020000000L, 0x0L, 0x200000000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2200000a5000L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x4000008000000L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x800600000840L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000014L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x10086410100L, 0x0L, 0x60000000100L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x1800000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1e000000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x440000000400L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x40008000L, 0x0L, 0x20000aL);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x80000002080L, 0x0L, 0x400000100000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L, 0x80000000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x9000010000200L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x2102000000000L, 0x0L, 0x0L);
      case 91:
         return jjStartNfaWithStates_0(0, 76, 19);
      case 92:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x21000000L, 0x0L);
      case 93:
         return jjStopAtPos(0, 77);
      case 94:
         return jjStopAtPos(0, 116);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800e000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x450000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2801220L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x30000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x4080001L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xa00000800L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x101440000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40L);
      case 123:
         return jjStartNfaWithStates_0(0, 100, 20);
      case 124:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000064000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 101);
      case 126:
         return jjStopAtPos(0, 99);
      case 176:
         return jjStopAtPos(0, 121);
      case 8364:
         return jjStopAtPos(0, 124);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 43:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0L, active2, 0L);
      case 45:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x473eL, active2, 0L);
      case 46:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 47:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 48:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 58:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 60:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         return jjMoveStringLiteralDfa2_0(active0, 0x1a00000000000000L, active1, 0x8000L, active2, 0L);
      case 61:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 62:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x9200010000220L, active1, 0L, active2, 0x91e000000000L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x84029802080L, active1, 0L, active2, 0L);
      case 70:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 8);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 8);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x2122100000000L, active1, 0L, active2, 0L);
      case 73:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 149, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L, active2, 0x1000000100014L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L, active1, 0L, active2, 0L);
      case 78:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000410140L, active1, 0L, active2, 0x60000000180L);
      case 79:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0xa5000L, active1, 0L, active2, 0x20000000000aL);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x40008000L, active1, 0L, active2, 0x80000000000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x800200000L, active1, 0L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x400000000000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 92:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xa0018800L);
      case 100:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 137, 8);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xa05400000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x140020000L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x6000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x400000060L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4100000000000L, active2, 0x1008000400L);
      case 114:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 106, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x10080001L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2800000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 124:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1800000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         break;
      case 47:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 88);
         break;
      case 58:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         break;
      case 60:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 62:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 55);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(2, 65);
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(2, 78);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(2, 81);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x154L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x10020L, active1, 0L, active2, 0L);
      case 68:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 8);
         break;
      case 69:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x102100002c00L, active1, 0L, active2, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x9800000L, active1, 0L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L, active2, 0x100000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000400000L, active1, 0L, active2, 0x80L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x80010000000L, active1, 0L, active2, 0x100000000000L);
      case 78:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xa5000L, active1, 0L, active2, 0x1000000000010L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000008000L, active1, 0L, active2, 0x200000000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000200L, active1, 0L, active2, 0x400000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x200e00340000L, active1, 0L, active2, 0L);
      case 84:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 8);
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000080L, active1, 0L, active2, 0x5c000000100L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 87:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000000L);
      case 89:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 8);
         break;
      case 92:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      case 99:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 162, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 100:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 8);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2881000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0x20000040L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x1L);
      case 108:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 163, 8);
         break;
      case 109:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 138, 8);
         break;
      case 110:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 139, 8);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 145, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1010006000L);
      case 113:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x44008000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 108, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 118:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 161, 8);
         break;
      case 120:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 144, 8);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000L);
      case 124:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(2, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 8);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 8);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 132, 8);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 8);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 166, 8);
         break;
      case 50:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 8);
         break;
      case 58:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(3, 60);
         break;
      case 62:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(3, 66);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(3, 68);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(3, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(3, 72);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000L, active1, 0L, active2, 0L);
      case 69:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 8);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 8);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 171, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x80800200000L, active1, 0L, active2, 0x40000000100L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000020L, active1, 0L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x8020229800200L, active1, 0L, active2, 0x1c00000000000L);
      case 76:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 173, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000002010000L, active1, 0L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 78:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 8);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L, active2, 0x80L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000400L, active1, 0L, active2, 0L);
      case 83:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 8);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x5000L, active1, 0L, active2, 0x100000000000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x540000L, active1, 0L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L, active2, 0x18000000000L);
      case 99:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 146, 8);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 8);
         break;
      case 100:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 143, 8);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 8);
         break;
      case 101:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 160, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 108:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 157, 8);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 164, 8);
         break;
      case 109:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 154, 8);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 112:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 8);
         break;
      case 113:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40006000L);
      case 116:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 49:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 8);
         break;
      case 65:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000600L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000000L, active2, 0L);
      case 69:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 8);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 8);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 172, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x800012008000L, active2, 0L);
      case 70:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 8);
         break;
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x40000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x400020L, active2, 0L);
      case 78:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 8);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x9800000L, active2, 0x1c00000000000L);
      case 82:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 136, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x8043e0100L, active2, 0x18000000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x5800L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x1000L);
      case 110:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 134, 8);
         break;
      case 114:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 133, 8);
         break;
      case 116:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 156, 8);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 8);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x544000L, active2, 0x18000000000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active2, 0L);
      case 69:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x18a0000L, active2, 0x40000000000L);
      case 71:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 174, 8);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000100L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000020L, active2, 0L);
      case 82:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x9000L, active2, 0L);
      case 83:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 8);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 8);
         break;
      case 84:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 8);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 175, 8);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 176, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x4200400L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x6000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x1100L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x140000L, active2, 0L);
      case 69:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0x2010000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x200400L, active2, 0L);
      case 76:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400200L, active2, 0x10000000000L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active2, 0L);
      case 82:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 170, 8);
         break;
      case 83:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 8);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 8);
         break;
      case 84:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0x80a8000L, active2, 0L);
      case 101:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 140, 8);
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, active2);
      return 7;
   }
   switch(curChar)
   {
      case 49:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 142, 8);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 168, 8);
         break;
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x8a0200L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x8409000L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000100L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x200400L, active2, 0L);
      case 83:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 8);
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x144000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0xa01400L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 83:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 8);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 8);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 84:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 8);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x1e0000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x2400000L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x180000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 83:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 10, 8);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 8);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 8);
         break;
      case 84:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 8);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x60000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x180000L);
      case 83:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(10, 12, 8);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(10, 27, 8);
         break;
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x2400000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x2400000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x180000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x60000L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x2400000L);
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x60000L);
      case 78:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(13, 22, 8);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 25, 8);
         break;
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0x180000L);
      case 66:
         return jjMoveStringLiteralDfa15_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa16_0(active0, 0x60000L);
      case 78:
         return jjMoveStringLiteralDfa16_0(active0, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa17_0(active0, 0x60000L);
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(17, 17, 8);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(17, 18, 8);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(17, 19, 8);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(17, 20, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x100000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 179)
                        kind = 179;
                     jjCheckNAdd(18);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 20:
               case 2:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 19:
               case 5:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar == 34 && kind > 178)
                     kind = 178;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 179)
                     kind = 179;
                  jjCheckNAdd(18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 177)
                        kind = 177;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 91)
                     jjAddStates(7, 8);
                  else if (curChar == 123)
                     jjAddStates(9, 10);
                  break;
               case 20:
               case 3:
                  if (curChar == 125 && kind > 52)
                     kind = 52;
                  break;
               case 19:
               case 6:
                  if (curChar == 93 && kind > 53)
                     kind = 53;
                  break;
               case 1:
                  if (curChar == 123)
                     jjAddStates(9, 10);
                  break;
               case 4:
                  if (curChar == 91)
                     jjAddStates(7, 8);
                  break;
               case 7:
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 177)
                     kind = 177;
                  jjCheckNAdd(8);
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(11, 13);
                  break;
               case 12:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 1)
                     kind = 1;
                  break;
               case 10:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x8L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   10, 11, 13, 10, 11, 15, 13, 5, 6, 2, 3, 12, 14, 16, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\115\101\103\110\111\116\105", "\105\116\104", 
"\123\105\124\123", "\111\116\126\101\122\111\101\116\124", 
"\126\101\122\111\101\102\114\105\123", "\117\120\105\122\101\124\111\117\116\123", "\105\126\105\116\124\123", 
"\103\117\116\123\124\122\101\111\116\124\123", "\123\105\105\123", "\103\117\116\123\124\101\116\124\123", 
"\120\122\117\120\105\122\124\111\105\123", "\111\116\103\114\125\104\105\123", 
"\103\117\116\103\122\105\124\105\137\126\101\122\111\101\102\114\105\123", "\101\102\123\124\122\101\103\124\137\126\101\122\111\101\102\114\105\123", 
"\103\117\116\103\122\105\124\105\137\103\117\116\123\124\101\116\124\123", "\101\102\123\124\122\101\103\124\137\103\117\116\123\124\101\116\124\123", 
"\101\123\123\105\122\124\111\117\116\123", "\111\116\111\124\111\101\114\111\123\101\124\111\117\116", 
"\122\105\106\111\116\105\115\105\116\124", "\122\105\106\111\116\105\123", 
"\111\115\120\114\105\115\105\116\124\101\124\111\117\116", "\111\115\120\117\122\124\123", 
"\104\105\106\111\116\111\124\111\117\116\123", "\126\101\114\125\105\123", "\102\105\107\111\116", "\120\122\105", 
"\111\106", "\124\110\105\116", "\105\114\123\111\106", "\105\114\123\105", 
"\101\123\123\105\122\124", "\101\116\131", "\127\110\105\122\105", "\114\105\124", "\102\105", 
"\111\116", "\103\110\117\111\103\105", "\117\122", "\123\105\114\105\103\124", 
"\127\110\105\116", "\103\101\123\105", "\117\106", "\105\111\124\110\105\122", "\126\101\122", 
"\127\110\111\114\105", "\104\117", "\126\101\122\111\101\116\124", null, null, "\74\76", "\74\75\76", 
"\74\72", "\57\74\72", "\75\76", "\74\74\72", "\57\74\74\72", "\57\72", "\57\75", 
"\74\75", "\76\75", "\74\55\76", "\53\55\76\76", "\53\55\76", "\55\55\76\76", 
"\55\55\76", "\76\53\76\76", "\76\53\76", "\76\55\76\76", "\76\55\76", "\74\55\55", 
"\72\75", "\133", "\135", "\174\55\76", "\74\74\174", "\74\174", "\174\76\76", 
"\174\76", "\74\53", "\76\74", "\55\76", "\74\55", "\57\174\134", "\134\174\57", 
"\72\72", "\75\75", "6\56", "\52\52", "\134\57", "\57\134", "\45", "\174", "\41",
"\43", "\176", "\173", "\175", "\56", "\50", "\51", "\54", "\157\162", "\46", 
"\156\157\164", "\163\153\151\160", "\55", "\53", "\52", "\57", "\155\157\144", "\75", "\136", 
"\74", "\76", "\72", "\44\60", "\260", "\57\57", "\134", "\u20ac", "\174\174", "\73", 
"\160\162\152\61", "\160\162\152\62", "\120\117\127", "\106\111\116", "\120\117\127\61", 
"\106\111\116\61", "\151\156\164\145\162", "\165\156\151\157\156", "\125\116\111\117\116", 
"\111\116\124\105\122", "\151\144", "\144\157\155", "\162\141\156", "\151\164\145\162\141\164\145", 
"\143\154\157\163\165\162\145", "\143\154\157\163\165\162\145\61", "\143\141\162\144", "\155\141\170", 
"\155\151\156", "\163\165\143\143", "\160\162\145\144", "\123\111\107\115\101", "\120\111", 
"\163\145\161", "\151\163\145\161", "\163\145\161\61", "\151\163\145\161\61", 
"\160\145\162\155", "\143\157\156\143", "\146\162\157\156\164", "\164\141\151\154", 
"\146\151\162\163\164", "\154\141\163\164", "\163\151\172\145", "\162\145\166", "\146\156\143", 
"\162\145\154", "\142\157\157\154", "\116\101\124", "\116\101\124\61", 
"\116\101\124\125\122\101\114", "\116\101\124\125\122\101\114\61", "\111\116\124", 
"\111\116\124\105\107\105\122", "\124\122\125\105", "\106\101\114\123\105", "\102\117\117\114", 
"\123\124\122\111\116\107", "\115\101\130\111\116\124", "\115\111\116\111\116\124", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xfffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x10L, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[19];
static private final int[] jjstateSet = new int[38];
static protected char curChar;
/** Constructor. */
public BParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public BParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 19; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 4)
         {
            jjmatchedKind = 4;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
