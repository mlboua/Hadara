/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. BParser.jj */
/*@egen*/options {
             
  LOOKAHEAD=1;
  FORCE_LA_CHECK=true;
                         
  ERROR_REPORTING=true;
}


PARSER_BEGIN(BParser)

/*****************************************************************************
*
* (C) 2003  B. TATIBOUET - Universit\u00e9 de Franche-Comt\u00e9
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
******************************************************************************/

package grammaire ;

import java.io.* ;
import java.util.* ;
import noeud.AfterParserException;
import noeud.BParserException;
import noeud.Noeud;

/** The B Parser

    @version 4.1 - 24 April 2002
    @author Bruno Tatibou\u00ebt
*/


public class BParser/*@bgen(jjtree)*/implements BParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTBParserState jjtree = new JJTBParserState();

/*@egen*/

	static String defToken ;
	static HashMap definitions = new java.util.HashMap() ;
	static boolean[] clauseDejaDefini ;
	static boolean variables, initialisation ;

/******************************************************************************/
/*      Traitement du produit parallele                                       */

	static private String changeOperateurAvantParsing(String texte) {
		StringBuffer texteModifie = new StringBuffer(texte) ;
		ArrayList aChangerParallel = new ArrayList() ;
		ArrayList aChangerSequence = new ArrayList() ;
		Token t ;
		int nbParen = 0 ; 
		t = getNextToken() ; 
		while (t.kind != EOF) {
			switch (t.kind) {
				case OpenParen :
					nbParen += 1 ;
					t = getNextToken() ;
					while (t.kind != EOF && nbParen != 0) {
						if (t.kind == OpenParen) {
							nbParen += 1 ;
						}
						if (t.kind == CloseParen) {
							nbParen -= 1 ;
						}
						if (t.kind == Parallel) {
							aChangerParallel.add (new Boolean(true)) ;
						}
						if (t.kind == SemiColon) {
							aChangerSequence.add (new Boolean(true)) ;
						}
						t = getNextToken() ; 
					}
					break ;
				case Parallel :
					aChangerParallel.add (new Boolean(false)) ;
					t = getNextToken() ;
					break ;
				case SemiColon :
					aChangerSequence.add (new Boolean(false)) ;
					t = getNextToken() ;
					break ;
				default :
					t = getNextToken() ;
					break ;
			}
		}

		int position = texte.indexOf("||", 0) ;
		int i = 0 ;
		while (i < aChangerParallel.size()) {
			if (((Boolean)aChangerParallel.get(i)).booleanValue()) {
				texteModifie.setCharAt(position,'/') ;
				texteModifie.setCharAt(position+1,'/') ;
			}
			position = texte.indexOf("||", position+2) ;
			i += 1 ;
		}

		position = texte.indexOf(";", 0) ;
		i = 0 ;
		while (i < aChangerSequence.size()) {
			if (((Boolean)aChangerSequence.get(i)).booleanValue()) {
				texteModifie.setCharAt(position,'\u00b0') ;
			}
			position = texte.indexOf(";", position+1) ;
			i += 1 ;
		}
		return(texteModifie.toString()) ;
	}


/*	Fin du produit parallele                                              */
/******************************************************************************/

/******************************************************************************/
/*      Parsing                                                               */

	static private void reinitialisation() {
		definitions.clear() ;
		clauseDejaDefini = new boolean[17] ;
		for (int i=0; i<17; i+=1) {clauseDejaDefini[i]=false;}
		// S'il y a des variables alors une clause initialisation doit etre presente
		variables = false; initialisation = false ;
	}
	

    	/** The function analyse parse a B source component
		@param fichier the B source component to parse
		@return the tree who represent the B Component
		@throws BParserException, FileNotFoundException, IOException 
    	*/

	static public Noeud analyse (File fichier) throws BParserException, AfterParserException, FileNotFoundException, IOException  {
		Noeud bComponent = null ;
		try {
			ASTStart n = null ;
			String bFile = null ;
			String bSuffix = null ;
		
			StringTokenizer st = new StringTokenizer(fichier.getName(),".");
			int nombreToken = st.countTokens () ;
			if (nombreToken == 1) {
				throw new ParseException ("Unknow type file (mch, ref, imp) : " + fichier.getName()) ; 
			}
			while (nombreToken > 1) {
				bFile = st.nextToken() ;
				nombreToken -=1 ;
			}
			bSuffix = st.nextToken() ;
				if (!bSuffix.equals("mch") && !bSuffix.equals("ref") && !bSuffix.equals("imp")) {
				throw new ParseException ("Unknow type file (mch, ref, imp) : " + fichier.getName()) ; 
			}
		
			char[] tampon = new char [(int)fichier.length()] ;
			FileReader lecteur = new FileReader(fichier) ; 	
			lecteur.read (tampon, 0, (int)fichier.length()) ;
			lecteur.close() ;
    	
			String texteAParser = new String(tampon) ;
			
			/* Just for output debug on console */
			/* System.out.println (texteAParser) ; */
			/* */
			
			if (!jj_initialized_once) {
				new BParser(new StringReader(texteAParser)) ;
			}
			else {
				ReInit(new StringReader(texteAParser)) ;
			}
			
			String texteModifie = changeOperateurAvantParsing(texteAParser) ;
			
			/* Just for output debug on console */
			/* System.out.println (texteModifie) ; */
			/* */
			
			ReInit(new StringReader(texteModifie)) ;		
			n = Start() ;	
		
			/* Just for output debug on console */
			/* writeXMLNodeForDebug ((SimpleNode) n) ; */
			/* */
		
			if (variables) { 
				if (!initialisation) {
					throw new ParseException ("VARIABLES clause but not INITIALISATION clause") ;
				}
			}
		
			bComponent = AfterParser.changeTree(n) ;	
		
			String nomBComponent = bComponent.getChild(0).getChild(0).getChild(0).getNodeValue() ;
			String typeBComponent = bComponent.getNodeName() ;
		
			if (!nomBComponent.equals(bFile)) {
				throw new ParseException ("Name of B component (" + nomBComponent + ") and file name (" + bFile + ") are differents") ; 
			}
		
			if (typeBComponent.equals("Machine") && !bSuffix.equals("mch")) {
				throw new ParseException ("Type of B component (MACHINE) and type file (" + bSuffix + ") not corresponding") ; 
			}

			if (typeBComponent.equals("Refinement") && !bSuffix.equals("ref")) {
				throw new ParseException ("Type of B component (REFINEMENT) and type file (" + bSuffix + ") not corresponding") ; 
			}
		
			if (typeBComponent.equals("Implementation") && !bSuffix.equals("imp")) {
				throw new ParseException ("Type of B component (IMPLEMENTATION) and type file (" + bSuffix + ") not corresponding") ; 
			}
		} catch (ParseException pex) {
			throw new BParserException (fichier.getAbsolutePath(), pex.getMessage()) ;
		} catch (AfterParserException pex) {
			throw new BParserException (fichier.getAbsolutePath(), pex.getMessage()) ;
		}
		
		return (bComponent) ;
	}


	private static void dumpRecursif (String indent, Noeud n, FileWriter fw) throws IOException {
		String nodeValue = n.getNodeValue() ;
		String nodeName = n.getNodeName() ;
		if (nodeValue == null) { 
    			String aDumper = new String(indent + '<' + nodeName + '>' + '\n') ;
			fw.write(aDumper, 0, aDumper.length()) ;
    		}
		else if (nodeName.equals("IdentifierComposed")) {
		    	String aDumper = new String(indent + '<' + nodeName + '>' + nodeValue + '\n') ;
			fw.write(aDumper, 0, aDumper.length()) ;
		}
    		else { String aDumper = new String(indent + '<' + nodeName + '>' + 
			nodeValue + '<' + '/' + nodeName + '>' + '\n') ; 
			fw.write(aDumper, 0, aDumper.length()) ;
		}
    		int nombreDeFils = n.getNumChildren() ;
    		if (nombreDeFils != 0) {
      			for (int i = 0; i < nombreDeFils; ++i) {
				Noeud nt = n.getChild(i);
				if (nt != null) {
	  				dumpRecursif(indent + '\t', nt, fw) ;
				}
      			}
    		}
		if (nodeValue == null || nodeName.equals("IdentifierComposed")) {
    			String aDumper = new String(indent + '<' + '/' + nodeName + '>' + '\n') ;
			fw.write(aDumper, 0, aDumper.length()) ;
    		}
  	}
	
    	/** The function writeXMLAfterParsing write the tree in a directory who represent the B Component in the source 
		@param bComponent the tree who represent the B Component
		@param outputDirectory the directory where produce the output
		@throws IOException, FileNotFoundException, AfterParserException
    	*/

	public static void writeXMLAfterParsing (Noeud bComponent, String outputDirectory) 
		throws AfterParserException, FileNotFoundException, IOException {

		File xmlDir = new File(outputDirectory) ;

		if (!xmlDir.exists()) {
			xmlDir.mkdir() ;
		}
		else	if (!xmlDir.isDirectory()) {
			throw new AfterParserException(new String(xmlDir.getName() + ": Not a directory")) ;
		} 
		
/*		outputDirectory = new String (outputDirectory + File.separator + "ParsingOutput") ;

		xmlDir = new File(outputDirectory) ;
		
		if (!xmlDir.exists()) {
			xmlDir.mkdir() ;
		}
		else	if (!xmlDir.isDirectory()) {
			throw new AfterParserException(new String(xmlDir.getName() + ": Not a directory")) ;
		} 
*/		
		String nomBComponent = bComponent.getChild(0).getChild(0).getChild(0).getNodeValue() ;
		String aDumper = new String("<?xml version=\"1.0\" standalone='yes' ?>" + '\n') ;

		FileWriter ecrivain = new FileWriter(new String(outputDirectory + File.separator + nomBComponent + ".xml")) ;
		ecrivain.write(aDumper, 0, aDumper.length()) ;
	 	dumpRecursif (" ", bComponent, ecrivain) ;
         	ecrivain.close() ;
      		
	}
	
    	/** The function writeXMLFileAfterParsing write the tree who represent the B Component in the source 
		@param bComponent the tree who represent the B Component
		@param nameFile the file where produce the output
		@throws IOException, FileNotFoundException, AfterParserException
    	*/
	
	public static void writeXMLFileAfterParsing (Noeud bComponent, String nameFile) 
		throws AfterParserException, FileNotFoundException, IOException {

        	FileWriter ecrivain = new FileWriter(nameFile) ;
		
		String aDumper = new String("<?xml version=\"1.0\" standalone='yes' ?>" + '\n') ;
		ecrivain.write(aDumper, 0, aDumper.length()) ;
 		dumpRecursif (" ", bComponent, ecrivain) ;
       		ecrivain.close() ;
      		
	}
	

	private static void dumpRecursifSimpleNode (String indent, SimpleNode n) throws IOException {
		String nodeValue = n.getNodeName() ;
		String nodeName = n.toString() ;
		if (nodeValue == null) { 
    			String aDumper = new String(indent + '<' + nodeName + '>' + '\n') ;
			System.out.println (aDumper) ;
    		}
		else if (nodeName.equals("IdentifierComposed")) {
		    	String aDumper = new String(indent + '<' + nodeName + '>' + nodeValue + '\n') ;
			System.out.println (aDumper) ;
		}
    		else { String aDumper = new String(indent + '<' + nodeName + '>' + 
			nodeValue + '<' + '/' + nodeName + '>' + '\n') ; 
			System.out.println (aDumper) ;
		}
    		int nombreDeFils = n.jjtGetNumChildren() ;
    		if (nombreDeFils != 0) {
      			for (int i = 0; i < nombreDeFils; ++i) {
				SimpleNode nt = (SimpleNode)n.jjtGetChild(i);
				if (nt != null) {
	  				dumpRecursifSimpleNode(indent + '\t', nt) ;
				}
      			}
    		}
		if (nodeValue == null || nodeName.equals("IdentifierComposed")) {
    			String aDumper = new String(indent + '<' + '/' + nodeName + '>' + '\n') ;
			System.out.println (aDumper) ;
    		}
  	}

	private static void writeXMLNodeForDebug (SimpleNode n) 
		throws AfterParserException, FileNotFoundException, IOException {

		String aDumper = new String("<?xml version=\"1.0\" standalone='yes' ?>" + '\n') ;
		System.out.println (aDumper) ;
 		dumpRecursifSimpleNode (" ", n) ;
	}
	
/*	Fin du parsing                                                        */
/******************************************************************************/

}

PARSER_END(BParser)


SKIP : {
  < [" ", "\t", "\n", "\r", "\u00a0"] >
}

SKIP : {
	"/*" : WithinComment
}

<WithinComment> SKIP : {
	"*/" : DEFAULT
}

<WithinComment> MORE:
{
  < ~[] >
}

TOKEN : {

  	<Machine: "MACHINE">
|  	<End : "END">
|  	<Sets : "SETS">
|  	<Invariant : "INVARIANT">
|  	<Variables : "VARIABLES">
|  	<Operations : "OPERATIONS">
| 	<Events : "EVENTS">
|	<Constraints : "CONSTRAINTS">
|	<Sees : "SEES">
|	<Constants : "CONSTANTS">
|	<Properties : "PROPERTIES">
|	<Includes : "INCLUDES">
|	<ConcreteVariables : "CONCRETE_VARIABLES">
|	<AbstractVariables : "ABSTRACT_VARIABLES">
|	<ConcreteConstants : "CONCRETE_CONSTANTS">
|	<AbstractConstants : "ABSTRACT_CONSTANTS">
|	<Assertions : "ASSERTIONS">
|	<Initialisation : "INITIALISATION">
|	<Refinement : "REFINEMENT">
|	<Refines : "REFINES">
|	<Implementation : "IMPLEMENTATION">
|	<Imports : "IMPORTS">
|	<Definitions : "DEFINITIONS">
|	<Values : "VALUES">
|	<Begin : "BEGIN">
|	<Pre : "PRE">
|	<If : "IF">
|	<Then : "THEN">
|	<Elsif : "ELSIF">
|	<Else : "ELSE">
|	<Assert : "ASSERT">
|	<Any : "ANY">
|	<Where : "WHERE">
|	<Let : "LET">
|	<Be : "BE">
|	<InLetVar : "IN">
|	<Choice : "CHOICE">
|	<OrC : "OR">
|	<Select : "SELECT">
|	<When : "WHEN">
|	<Case : "CASE">
|	<Of : "OF">
|	<Either : "EITHER">
|	<Var : "VAR">
|	<While : "WHILE">
|	<Do : "DO">
|	<Variant : "VARIANT">

|	<EmptySet : "{" (" ")* "}">
|	<EmptySequence : "[" (" ")* "]">
|	<EmptySequenceOld : "<>">


|	<Equivalence : "<=>">
|	<Subset : "<:">
|	<NotSubset : "/<:">
|	<Implication : "=>">
|	<StrictSubset : "<<:">
|	<NotStrictSubset : "/<<:">
|	<NotSetMemberShip : "/:">
|	<NotEqual : "/=">

|	<LessThanOrEqual : "<=">
|	<GreatherThanOrEqual : ">=">


|	<Relation : "<->">
|	<PartialSurjection : "+->>">
|	<PartialFunction: "+->">
|	<TotalSurjection : "-->>">
|	<TotalFunction : "-->">
|	<PartialBijection : ">+>>">
|	<PartialInjection : ">+>">
|	<TotalBijection : ">->>">
|	<TotalInjection : ">->">

|	<OperationReturn : "<--">
|	<DevientEgal : ":=">

|	<OpenCurly : "[">
|	<CloseCurly : "]">

|	<Maplet : "|->">

|	<DomainSubstraction : "<<|">
|	<DomainRestriction : "<|">
|	<RangeSubstraction : "|>>">
|	<RangeRestriction : "|>">
|	<Override : "<+">
|	<DirectProduct : "><">
|	<PrependSequence : "->">
|	<AppendSequence : "<-">
|	<PrefixSequence : "/|\\">
|	<SuffixSequence : "\\|/">

|	<SetIn : "::">
|	<EqualEqual : "==">
|	<NatRange : "..">
|	<Power : "**">

|	<Union : "\\/">
|	<Intersection : "/\\">

|	<Lambda : "%">
|	<SuchAs : "|">
|	<Forall : "!">
|	<Exists : "#">
|	<Tilde : "~">
|	<OpenBraces : "{">
|	<CloseBraces : "}">
|  	<Point : ".">
|  	<OpenParen : "(">
|  	<CloseParen : ")">
|	<Comma : ",">
|	<Or : "or">
|	<And  : "&">
|	<Not : "not">
|	<Skip : "skip">
|	<Minus : "-">
|	<Plus : "+">
|	<Product : "*">
|	<Division : "/">
|	<Modulo : "mod">
|	<Equal : "=">
|	<ConcatSequence : "^">
|	<LessThan : "<">
|	<GreatherThan : ">">

|	<In : ":">
|	<DollarZero : "$0">

| 	<Composition : "\u00b0">
|	<ParallelProduct : "//">
|	<SetMinus : "\\">
|	<CartesianProduct : "\u20ac">

|	<Parallel : "||">
|	<SemiColon : ";">

|	<Prj1 : "prj1">
|	<Prj2 : "prj2">
|	<POW : "POW">
|	<FIN : "FIN">
|	<POW1 : "POW1">
|	<FIN1 : "FIN1">
|	<InterGen : "inter">
|	<UnionGen : "union">
|	<UnionQuant : "UNION">
|	<InterQuant : "INTER">
|	<Id : "id">
|	<Dom : "dom">
|	<Ran : "ran">
|	<Iterate : "iterate">
|	<Closure : "closure">
|	<Closure1 : "closure1">
|	<Card : "card">
|	<Max : "max">
|	<Min : "min">
|       <Succ : "succ">
|	<Pred : "pred">
|	<Sigma : "SIGMA">
|	<Pi : "PI">
|	<Seq : "seq">
|	<Iseq : "iseq">
|	<Seq1 : "seq1">
|	<Iseq1 : "iseq1">
|	<Perm : "perm">
|	<Conc : "conc">
|	<Front : "front">
|	<Tail : "tail">
|	<First : "first">
|	<Last : "last">
|	<Size : "size">
|	<Rev : "rev">
|	<Fnc : "fnc">
|	<Rel : "rel">
|	<Bool : "bool">

|	<Nat : "NAT">
|	<Nat1 : "NAT1">
|	<Natural : "NATURAL">
|	<Natural1 : "NATURAL1">
|	<Int : "INT">
|	<Integer : "INTEGER">
|	<True : "TRUE">
|	<False : "FALSE">
|	<Boolean : "BOOL">
|	<StringSet : "STRING">
|	<MaxInt : "MAXINT">
|	<MinInt : "MININT">

}



TOKEN : {
	<IDENTIFIER : ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])*>
}

TOKEN : {
	<String:
      		"\""
      		(         (~["\"","\\","\n","\r"])
        		| ("\\"
            			(   ["n","t","b","r","f","\\","'","\""]
            			  | ["0"-"7"] ( ["0"-"7"] )?
            			  | ["0"-"3"] ["0"-"7"] ["0"-"7"]
           			)
          		  )
      		)*
          	"\""
  	>
}

TOKEN : {
	<Number : (["0"-"9"])+ >
}

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Start */
  try {
/*@egen*/
  (
    Composant() | LOOKAHEAD(Predicate()) Predicate() | Expression()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Composant() : {} {
	( 
	  {reinitialisation() ; }
	   (Machine ()
	    | Refinement () 
	    | Implementation ()
	   )
	) 
}



void Machine()          : {/*@bgen(jjtree) Machine */
  ASTMachine jjtn000 = new ASTMachine(JJTMACHINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Machine */
        try {
/*@egen*/
	<Machine> EnTeteComposant() ListeMachineClauses() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Refinement()             : {/*@bgen(jjtree) Refinement */
  ASTRefinement jjtn000 = new ASTRefinement(JJTREFINEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Refinement */
        try {
/*@egen*/
	<Refinement> EnTeteComposant() Refines() ListeRefinementClauses() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Implementation()                 : {/*@bgen(jjtree) Implementation */
  ASTImplementation jjtn000 = new ASTImplementation(JJTIMPLEMENTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Implementation */
        try {
/*@egen*/
	<Implementation> EnTeteComposant() Refines() ListeImplementationClauses() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EnTeteComposant()         : {/*@bgen(jjtree) Header */
  ASTHeader jjtn000 = new ASTHeader(JJTHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Header */
        try {
/*@egen*/
	ComposantName() [ComposantParameters()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ComposantName()       : {/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Name */
        try {
/*@egen*/
	Identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ComposantParameters()             : {/*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Parameters */
        try {
/*@egen*/
	<OpenParen> ListIdent() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Refines()         : {/*@bgen(jjtree) Refine */
  ASTRefine jjtn000 = new ASTRefine(JJTREFINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Refine */
        try {
/*@egen*/
	<Refines> Identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ListeMachineClauses() : {} {
	(MachineClause())*
}

void ListeRefinementClauses() : {} {
	(RefinementClause())*
}

void ListeImplementationClauses() : {} {
	(ImplementationClause())*
}

void MachineClause() : {} {
	   DefinitionsClauseMachine() 
	     { if (clauseDejaDefini[0]) 
		throw new ParseException("Clause DEFINITIONS already defined\n") ; 
		else clauseDejaDefini[0] = true ; }
	|  ConstraintsClause()
	     { if (clauseDejaDefini[1]) 
		throw new ParseException("Clause CONSTRAINTS already defined\n") ; 
		else clauseDejaDefini[1] = true ; }
	|  SeesClause()
	     { if (clauseDejaDefini[2]) 
		throw new ParseException("Clause SEES already defined\n") ; 
		else clauseDejaDefini[2] = true ; }
	|  IncludesClause()
	     { if (clauseDejaDefini[3]) 
		throw new ParseException("Clause INCLUDES already defined\n") ; 
		else clauseDejaDefini[3] = true ; }
	|  SetsClause()
	     { if (clauseDejaDefini[4]) 
		throw new ParseException("Clause SETS already defined\n") ; 
		else clauseDejaDefini[4] = true ; }
	|  ConstantsConcreteClause()
	     { if (clauseDejaDefini[5]) 
		throw new ParseException("Clause CONCRETE CONSTANTS already defined\n") ; 
		else clauseDejaDefini[5] = true ; }
	|  ConstantsAbstractClause()
	     { if (clauseDejaDefini[6]) 
		throw new ParseException("Clause ABSTRACT CONSTANTS already defined\n") ; 
		else clauseDejaDefini[6] = true ; }
	|  PropertiesClause()
	     { if (clauseDejaDefini[7]) 
		throw new ParseException("Clause PROPERTIES already defined\n") ; 
		else clauseDejaDefini[7] = true ; }
	|  VariablesConcreteClause()
	     { if (clauseDejaDefini[8]) 
		throw new ParseException("Clause CONCRETE VARIABLES already defined\n") ; 
		else clauseDejaDefini[8] = true ;
	       variables = true ;
	     }
	|  VariablesAbstractClause()
	     { if (clauseDejaDefini[9]) 
		throw new ParseException("Clause ABSTRACT VARIABLES already defined\n") ; 
		else clauseDejaDefini[9] = true ; 
	       variables = true ;
	     }
	|  InvariantClause()
	     { if (clauseDejaDefini[10]) 
		throw new ParseException("Clause INVARIANT already defined\n") ; 
		else clauseDejaDefini[10] = true ; }
	|  AssertionsClause()
	     { if (clauseDejaDefini[11]) 
		throw new ParseException("Clause ASSERTIONS already defined\n") ; 
		else clauseDejaDefini[11] = true ; }
	|  InitialisationClauseMachine()
	     { if (clauseDejaDefini[12]) 
		throw new ParseException("Clause INITIALISATION already defined\n") ; 
		else clauseDejaDefini[12] = true ;
               initialisation = true ;		
	     }
	|  OperationsClauseMachine()
	     { if (clauseDejaDefini[13]) 
		throw new ParseException("Clause OPERATIONS already defined\n") ; 
		else clauseDejaDefini[13] = true ; }
}

void RefinementClause() : {} {
	   DefinitionsClauseRefinement() 
	     { if (clauseDejaDefini[0]) 
		throw new ParseException("Clause DEFINITIONS already defined\n") ; 
		else clauseDejaDefini[0] = true ; }
	|  SeesClause()
	     { if (clauseDejaDefini[1]) 
		throw new ParseException("Clause SEES already defined\n") ; 
		else clauseDejaDefini[1] = true ; }
	|  IncludesClause()
	     { if (clauseDejaDefini[2]) 
		throw new ParseException("Clause INCLUDES already defined\n") ; 
		else clauseDejaDefini[2] = true ; }
	|  SetsClause()
	     { if (clauseDejaDefini[3]) 
		throw new ParseException("Clause SETS already defined\n") ; 
		else clauseDejaDefini[3] = true ; }
	|  ConstantsConcreteClause()
	     { if (clauseDejaDefini[4]) 
		throw new ParseException("Clause CONCRETE CONSTANTS already defined\n") ; 
		else clauseDejaDefini[4] = true ; }
	|  ConstantsAbstractClause()
	     { if (clauseDejaDefini[5]) 
		throw new ParseException("Clause ABSTRACT CONSTANTS already defined\n") ; 
		else clauseDejaDefini[5] = true ; }
	|  PropertiesClause()
	     { if (clauseDejaDefini[6]) 
		throw new ParseException("Clause PROPERTIES already defined\n") ; 
		else clauseDejaDefini[6] = true ; }
	|  VariablesConcreteClause()
	     { if (clauseDejaDefini[7]) 
		throw new ParseException("Clause CONCRETE VARIABLES already defined\n") ; 
		else clauseDejaDefini[7] = true ; 
	       variables = true ;
	     }
	|  VariablesAbstractClause()
	     { if (clauseDejaDefini[8]) 
		throw new ParseException("Clause ABSTRACT VARAIBLE already defined\n") ; 
		else clauseDejaDefini[8] = true ; 
	       variables = true ;
	     }
	|  InvariantClause()
	     { if (clauseDejaDefini[9]) 
		throw new ParseException("Clause INVARIANT already defined\n") ; 
		else clauseDejaDefini[9] = true ; }
	|  AssertionsClause()
	     { if (clauseDejaDefini[10]) 
		throw new ParseException("Clause ASSERTIONS already defined\n") ; 
		else clauseDejaDefini[10] = true ; }
	|  InitialisationClauseRefinement()
	     { if (clauseDejaDefini[11]) 
		throw new ParseException("Clause INITIALISATION already defined\n") ; 
		else clauseDejaDefini[11] = true ;
               initialisation = true ;		
	     }
	|  OperationsClauseRefinement()
	     { if (clauseDejaDefini[12]) 
		throw new ParseException("Clause OPERATIONS already defined\n") ; 
		else clauseDejaDefini[12] = true ; }
}

void ImplementationClause() : {} {
	   DefinitionsClauseImplementation() 
	     { if (clauseDejaDefini[0]) 
		throw new ParseException("Clause DEFINITIONS already defined\n") ; 
		else clauseDejaDefini[0] = true ; }
	|  SeesClause()
	     { if (clauseDejaDefini[1]) 
		throw new ParseException("Clause SEES already defined\n") ; 
		else clauseDejaDefini[1] = true ; }
	|  ImportsClauseImplementation()
	     { if (clauseDejaDefini[2]) 
		throw new ParseException("Clause IMPORTS already defined\n") ; 
		else clauseDejaDefini[2] = true ; }
	|  SetsClause()
	     { if (clauseDejaDefini[3]) 
		throw new ParseException("Clause SETS already defined\n") ; 
		else clauseDejaDefini[3] = true ; }
	|  ConstantsConcreteClause()
	     { if (clauseDejaDefini[4]) 
		throw new ParseException("Clause CONCRETE CONSTANTS already defined\n") ; 
		else clauseDejaDefini[4] = true ; }
	|  ValuesClauseImplementation()
	     { if (clauseDejaDefini[5]) 
		throw new ParseException("Clause VALUES already defined\n") ; 
		else clauseDejaDefini[5] = true ; }
	|  PropertiesClause()
	     { if (clauseDejaDefini[6]) 
		throw new ParseException("Clause PROPERTIES already defined\n") ; 
		else clauseDejaDefini[6] = true ; }
	|  VariablesConcreteClause()
	     { if (clauseDejaDefini[7]) 
		throw new ParseException("Clause CONCRETE VARIABLES already defined\n") ; 
		else clauseDejaDefini[7] = true ; 
	       variables = true ;
	     }
	|  InvariantClause()
	     { if (clauseDejaDefini[8]) 
		throw new ParseException("Clause INVARIANT already defined\n") ; 
		else clauseDejaDefini[8] = true ; }
	|  AssertionsClause()
	     { if (clauseDejaDefini[9]) 
		throw new ParseException("Clause ASSERTIONS already defined\n") ; 
		else clauseDejaDefini[9] = true ; }
	|  InitialisationClauseImplementation()
	     { if (clauseDejaDefini[10]) 
		throw new ParseException("Clause INITIALISATION already defined\n") ; 
		else clauseDejaDefini[10] = true ; 
	       initialisation = true ;
	     }
	|  OperationsClauseImplementation()
	     { if (clauseDejaDefini[11]) 
		throw new ParseException("Clause OPERATIONS already defined\n") ; 
		else clauseDejaDefini[11] = true ; }
}

void DefinitionsClauseMachine()              : {/*@bgen(jjtree) Definitions */
  ASTDefinitions jjtn000 = new ASTDefinitions(JJTDEFINITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Definitions */
        try {
/*@egen*/
	<Definitions> DefinitionMachine() (LOOKAHEAD(<SemiColon> DefinitionMachine()) <SemiColon> DefinitionMachine())* [<SemiColon>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefinitionsClauseRefinement()              : {/*@bgen(jjtree) Definitions */
  ASTDefinitions jjtn000 = new ASTDefinitions(JJTDEFINITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Definitions */
        try {
/*@egen*/
	<Definitions> DefinitionRefinement() (LOOKAHEAD(<SemiColon> DefinitionRefinement()) <SemiColon> DefinitionRefinement())* [<SemiColon>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefinitionsClauseImplementation()              : {/*@bgen(jjtree) Definitions */
  ASTDefinitions jjtn000 = new ASTDefinitions(JJTDEFINITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Definitions */
        try {
/*@egen*/
	<Definitions> DefinitionImplementation() (LOOKAHEAD(<SemiColon> DefinitionImplementation()) <SemiColon> DefinitionImplementation())* [<SemiColon>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefinitionMachine()             : {/*@bgen(jjtree) Definition */
  ASTDefinition jjtn000 = new ASTDefinition(JJTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Definition */
        try {
/*@egen*/
	EnTeteDefinition() <EqualEqual>  CorpsDefinitionMachine()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefinitionRefinement()             : {/*@bgen(jjtree) Definition */
  ASTDefinition jjtn000 = new ASTDefinition(JJTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Definition */
        try {
/*@egen*/
	EnTeteDefinition() <EqualEqual>  CorpsDefinitionRefinement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefinitionImplementation()             : {/*@bgen(jjtree) Definition */
  ASTDefinition jjtn000 = new ASTDefinition(JJTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Definition */
        try {
/*@egen*/
	EnTeteDefinition() <EqualEqual>  CorpsDefinitionImplementation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EnTeteDefinition()         : {/*@bgen(jjtree) Header */
  ASTHeader jjtn000 = new ASTHeader(JJTHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Header */
        try {
/*@egen*/
	DefinitionName() [ParametresDefinition()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefinitionName()       : {/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Name */
        try {
/*@egen*/
	Identifier()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{ defToken = getToken(0).image ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ParametresDefinition()             : {/*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Parameters */
        try {
/*@egen*/
	<OpenParen> ListIdent() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CorpsDefinitionMachine() : {} {
	     LOOKAHEAD(Predicate()) Predicate() {definitions.put(defToken,"Predicate") ; }
	   | LOOKAHEAD(SubstitutionMachineDefinition()) SubstitutionMachineDefinition() {definitions.put(defToken,"Substitution") ; }	
	   | LOOKAHEAD(Expression() <Comma>) ListExpression() {definitions.put(defToken,"ListExpression") ; }
 	   | LOOKAHEAD(Expression()) Expression() {definitions.put(defToken,"Expression") ; } 
	   | SubstitutionPreconditionMachine() {definitions.put(defToken,"Substitution") ; }
/*	   | SubstitutionMachine1() {definitions.put(defToken,"Substitution") ; }	*/
}

void SubstitutionMachineDefinition() : {} {
	  CallDefinitionSubstitution()
	| SubstitutionBeginMachine()
	| SubstitutionSkipMachine()    
	| SubstitutionAssertionMachine()
	| SubstitutionChoiceMachine()
	| SubstitutionIfMachine()
	| SubstitutionSelectMachine()
	| SubstitutionCaseMachine()              
	| SubstitutionAnyMachine()
	| SubstitutionLetMachine()  
	| LOOKAHEAD(SubstitutionDevienEgalFonction()) SubstitutionDevienEgalFonction()     
	| LOOKAHEAD(SubstitutionDevientElementDe()) SubstitutionDevientElementDe()
	| LOOKAHEAD(SubstitutionDevientTelQue()) SubstitutionDevientTelQue()
	| LOOKAHEAD(SubstitutionDevientEgalVariables()) SubstitutionDevientEgalVariables()
	| SubstitutionCallOperationDefinition()
}

void SubstitutionCallOperationDefinition()                            : {/*@bgen(jjtree) SubstitutionCallOperation */
  ASTSubstitutionCallOperation jjtn000 = new ASTSubstitutionCallOperation(JJTSUBSTITUTIONCALLOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionCallOperation */
          try {
/*@egen*/
	  LOOKAHEAD (Resultats()) Resultats() OperationName() [ParametresEffectifs()]
	| OperationName() ParametresEffectifs()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
} 
   
void CorpsDefinitionRefinement() : {} {
	     LOOKAHEAD(Predicate()) Predicate() {definitions.put(defToken,"Predicate") ; }
	   | LOOKAHEAD(SubstitutionRefinementDefinition()) SubstitutionRefinementDefinition() {definitions.put(defToken,"Substitution") ; }
	   | LOOKAHEAD(Expression() <Comma>) ListExpression() {definitions.put(defToken,"ListExpression") ; }
 	   | LOOKAHEAD(Expression()) Expression() {definitions.put(defToken,"Expression") ; } 
	   | SubstitutionPreconditionMachine() {definitions.put(defToken,"Substitution") ; }
/*	   | SubstitutionRefinement1() {definitions.put(defToken,"Substitution") ; } */
}

void SubstitutionRefinementDefinition() : {} {
	  CallDefinitionSubstitution()
	| SubstitutionBeginRefinement()
	| SubstitutionSkipRefinement()    
	| SubstitutionAssertionRefinement()
	| SubstitutionChoiceRefinement()
	| SubstitutionIfRefinement()
	| SubstitutionSelectRefinement()
	| SubstitutionCaseRefinement()              
	| SubstitutionAnyRefinement()
	| SubstitutionLetRefinement()  
	| SubstitutionVarRefinement()  
	| LOOKAHEAD(SubstitutionDevienEgalFonction()) SubstitutionDevienEgalFonction()     
	| LOOKAHEAD(SubstitutionDevientElementDe()) SubstitutionDevientElementDe()
	| LOOKAHEAD(SubstitutionDevientTelQue()) SubstitutionDevientTelQue()
	| LOOKAHEAD(SubstitutionDevientEgalVariables()) SubstitutionDevientEgalVariables()
	| SubstitutionCallOperationDefinition()
}

void CorpsDefinitionImplementation() : {} {
	     LOOKAHEAD(Predicate()) Predicate() {definitions.put(defToken,"Predicate") ; }
	   | LOOKAHEAD(SubstitutionImplementationDefinition()) SubstitutionImplementationDefinition() {definitions.put(defToken,"Substitution") ; }
/*	   | LOOKAHEAD(Terme()) Terme() {definitions.put(defToken,"Expression") ; }	   */
	   | LOOKAHEAD(Expression()) Expression() {definitions.put(defToken,"Expression") ; } 
/* 	   | LOOKAHEAD(ValueTerme()) ValueTerme() {definitions.put(defToken,"Expression") ; } */
/*	   | SubstitutionImplementation1() {definitions.put(defToken,"Substitution") ; } */
}

void SubstitutionImplementationDefinition() : {} {
	  CallDefinitionSubstitution()
	| SubstitutionBeginImplementation()
	| SubstitutionSkipImplementation()    
	| SubstitutionAssertionImplementation()
	| SubstitutionIfImplementation()
	| SubstitutionCaseImplementation()              
	| SubstitutionWhileImplementation()  
	| SubstitutionVarImplementation()
	| LOOKAHEAD(SubstitutionDevientEgalVariablesImplementation()) SubstitutionDevientEgalVariablesImplementation()
	| SubstitutionCallOperationImplementationDefinition()
}

void SubstitutionCallOperationImplementationDefinition()                            : {/*@bgen(jjtree) SubstitutionCallOperation */
  ASTSubstitutionCallOperation jjtn000 = new ASTSubstitutionCallOperation(JJTSUBSTITUTIONCALLOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionCallOperation */
          try {
/*@egen*/
	  LOOKAHEAD (Resultats()) Resultats() OperationName() [ParametresEffectifsImplementation()]
	| OperationName() ParametresEffectifsImplementation()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
} 
	
void ConstraintsClause()              : {/*@bgen(jjtree) Constraints */
  ASTConstraints jjtn000 = new ASTConstraints(JJTCONSTRAINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Constraints */
        try {
/*@egen*/
	<Constraints> Predicate()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SeesClause()       : {/*@bgen(jjtree) Sees */
  ASTSees jjtn000 = new ASTSees(JJTSEES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Sees */
        try {
/*@egen*/
	<Sees> IdentifierComposed() (<Comma> IdentifierComposed())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}  

void ImportsClauseImplementation()          : {/*@bgen(jjtree) Imports */
  ASTImports jjtn000 = new ASTImports(JJTIMPORTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Imports */
        try {
/*@egen*/
	<Imports> ImportsDeclaration() (<Comma> ImportsDeclaration())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
  
void ImportsDeclaration()              : {/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
	IdentifierComposed() [<OpenParen> InstanciationImplementation() (<Comma> InstanciationImplementation())* <CloseParen>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void IncludesClause()           : {/*@bgen(jjtree) Includes */
  ASTIncludes jjtn000 = new ASTIncludes(JJTINCLUDES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Includes */
        try {
/*@egen*/
	<Includes> IncludesDeclaration() (<Comma> IncludesDeclaration())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IncludesDeclaration()              : {/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
	IdentifierComposed() [<OpenParen> Instanciation() (<Comma> Instanciation())* <CloseParen>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void Instanciation() : {} {
	   IntegerSet ()
	|  BooleanSet ()
	|  LOOKAHEAD(Intervalle()) Intervalle()
	|  Terme()
}

void InstanciationImplementation() : {} {
	   IntegerSetImplementation()
	|  BooleanSet()
	|  LOOKAHEAD(Intervalle()) Intervalle()
	|  Terme()
}

void SetsClause()       : {/*@bgen(jjtree) Sets */
  ASTSets jjtn000 = new ASTSets(JJTSETS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Sets */
        try {
/*@egen*/
   /* j'ai ajout\u00e9 ()* autour de  SetDeclaration pour accepter plusieurs declarations de Sets */
	<Sets> (SetDeclaration())* (<SemiColon> SetDeclaration())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SetDeclaration()              : {/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
  	//Identifier() [<Equal> <OpenBraces> PereListIdent()  <CloseBraces>]
	Identifier() [<Equal> <OpenBraces> EntierLitteral()(<Comma> EntierLitteral())*  <CloseBraces>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	/*Identifier() [<Equal> <OpenBraces> PereListIdent() | EntierLitteral()(<Comma> EntierLitteral())*  <CloseBraces>]*/	
}

void ConstantsConcreteClause()                    : {/*@bgen(jjtree) ConcreteConstants */
  ASTConcreteConstants jjtn000 = new ASTConcreteConstants(JJTCONCRETECONSTANTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ConcreteConstants */
        try {
/*@egen*/
	(<ConcreteConstants> | <Constants> ) PereListIdent()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ConstantsAbstractClause()                    : {/*@bgen(jjtree) AbstractConstants */
  ASTAbstractConstants jjtn000 = new ASTAbstractConstants(JJTABSTRACTCONSTANTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) AbstractConstants */
        try {
/*@egen*/
	(<AbstractConstants>) PereListIdent()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PropertiesClause()             : {/*@bgen(jjtree) Properties */
  ASTProperties jjtn000 = new ASTProperties(JJTPROPERTIES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Properties */
        try {
/*@egen*/
	<Properties> Predicate()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ValuesClauseImplementation()         : {/*@bgen(jjtree) Values */
  ASTValues jjtn000 = new ASTValues(JJTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Values */
        try {
/*@egen*/
	<Values> Valuation() (<SemiColon> Valuation())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Valuation()        : {/*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Value */
        try {
/*@egen*/
	Identifier() <Equal> ValueTerme()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariablesConcreteClause()                    : {/*@bgen(jjtree) ConcreteVariables */
  ASTConcreteVariables jjtn000 = new ASTConcreteVariables(JJTCONCRETEVARIABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ConcreteVariables */
        try {
/*@egen*/
	(<ConcreteVariables>) IdentifierComposed() (<Comma> IdentifierComposed())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariablesAbstractClause()                    : {/*@bgen(jjtree) AbstractVariables */
  ASTAbstractVariables jjtn000 = new ASTAbstractVariables(JJTABSTRACTVARIABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) AbstractVariables */
        try {
/*@egen*/
	(<AbstractVariables> | <Variables>) PereListIdent()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void InvariantClause()            : {/*@bgen(jjtree) Invariant */
  ASTInvariant jjtn000 = new ASTInvariant(JJTINVARIANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Invariant */
        try {
/*@egen*/
	<Invariant> Predicate()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AssertionsClause()             : {/*@bgen(jjtree) Assertions */
  ASTAssertions jjtn000 = new ASTAssertions(JJTASSERTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Assertions */
        try {
/*@egen*/
	<Assertions> Predicate() (<SemiColon> Predicate())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void InitialisationClauseMachine()                 : {/*@bgen(jjtree) Initialisation */
  ASTInitialisation jjtn000 = new ASTInitialisation(JJTINITIALISATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Initialisation */
        try {
/*@egen*/
	<Initialisation> SubstitutionMachine0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void InitialisationClauseRefinement()                 : {/*@bgen(jjtree) Initialisation */
  ASTInitialisation jjtn000 = new ASTInitialisation(JJTINITIALISATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Initialisation */
        try {
/*@egen*/
	<Initialisation> SubstitutionRefinement0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void InitialisationClauseImplementation()                 : {/*@bgen(jjtree) Initialisation */
  ASTInitialisation jjtn000 = new ASTInitialisation(JJTINITIALISATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Initialisation */
        try {
/*@egen*/
	<Initialisation> SubstitutionImplementation0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OperationsClauseMachine()             : {/*@bgen(jjtree) Operations */
  ASTOperations jjtn000 = new ASTOperations(JJTOPERATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Operations */
        try {
/*@egen*/
	<Operations> OperationMachine() (<SemiColon> OperationMachine())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OperationMachine()            : {/*@bgen(jjtree) Operation */
  ASTOperation jjtn000 = new ASTOperation(JJTOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Operation */
         try {
/*@egen*/
	 EnTeteOperation() <Equal> CorpsMachine()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void OperationsClauseRefinement()             : {/*@bgen(jjtree) Operations */
  ASTOperations jjtn000 = new ASTOperations(JJTOPERATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Operations */
        try {
/*@egen*/
	<Operations> OperationRefinement() (<SemiColon> OperationRefinement())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OperationRefinement()            : {/*@bgen(jjtree) Operation */
  ASTOperation jjtn000 = new ASTOperation(JJTOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Operation */
         try {
/*@egen*/
	 EnTeteOperation() <Equal> CorpsRefinement()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void OperationsClauseImplementation()             : {/*@bgen(jjtree) Operations */
  ASTOperations jjtn000 = new ASTOperations(JJTOPERATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Operations */
        try {
/*@egen*/
	<Operations> OperationImplementation() (<SemiColon> OperationImplementation())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OperationImplementation()            : {/*@bgen(jjtree) Operation */
  ASTOperation jjtn000 = new ASTOperation(JJTOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Operation */
         try {
/*@egen*/
	 EnTeteOperation() <Equal> CorpsImplementation()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void EnTeteOperation()         : {/*@bgen(jjtree) Header */
  ASTHeader jjtn000 = new ASTHeader(JJTHEADER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Header */
        try {
/*@egen*/
	[LOOKAHEAD (Resultats()) Resultats()] OperationName() [Parametres()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Resultats()          : {/*@bgen(jjtree) Results */
  ASTResults jjtn000 = new ASTResults(JJTRESULTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Results */
        try {
/*@egen*/
	PereListIdent() <OperationReturn>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OperationName()       : {/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Name */
        try {
/*@egen*/
	IdentifierComposed()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Parametres()             : {/*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Parameters */
        try {
/*@egen*/
	<OpenParen> PereListIdent() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CorpsMachine() : {} {
	SubstitutionPreconditionMachine()
	| SubstitutionMachine1()
}

void CorpsRefinement() : {} {
	SubstitutionPreconditionRefinement()
	| SubstitutionRefinement1()
}

void CorpsImplementation() : {} {
	SubstitutionImplementation1()	
}

void SubstitutionMachine0() : {} {/*@bgen(jjtree) #SubstitutionMachine0(> 1) */
        {
          ASTSubstitutionMachine0 jjtn001 = new ASTSubstitutionMachine0(JJTSUBSTITUTIONMACHINE0);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(SubstitutionMachine1() [RSubstitutionMachine0()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	                         
}

void RSubstitutionMachine0()                        : {/*@bgen(jjtree) RSubstitutionMachine0 */
                                                        ASTRSubstitutionMachine0 jjtn000 = new ASTRSubstitutionMachine0(JJTRSUBSTITUTIONMACHINE0);
                                                        boolean jjtc000 = true;
                                                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RSubstitutionMachine0 */
        try {
/*@egen*/
	<Parallel> SubstitutionMachine0()/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/ { jjtn000.setNodeName ("Parallel") ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionRefinement0() : {} {/*@bgen(jjtree) #SubstitutionRefinement0(> 1) */
        {
          ASTSubstitutionRefinement0 jjtn001 = new ASTSubstitutionRefinement0(JJTSUBSTITUTIONREFINEMENT0);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(SubstitutionRefinement1() [RSubstitutionRefinement0()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	                            
}

void RSubstitutionRefinement0()                           : {/*@bgen(jjtree) RSubstitutionRefinement0 */
                                                              ASTRSubstitutionRefinement0 jjtn000 = new ASTRSubstitutionRefinement0(JJTRSUBSTITUTIONREFINEMENT0);
                                                              boolean jjtc000 = true;
                                                              jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RSubstitutionRefinement0 */
        try {
/*@egen*/
	<Parallel> SubstitutionRefinement0()/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                             }
/*@egen*/ { jjtn000.setNodeName ("Parallel") ; }
	| <SemiColon> SubstitutionRefinement0()/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/ { jjtn000.setNodeName ("Sequence") ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionImplementation0() : {} {/*@bgen(jjtree) #SubstitutionImplementation0(> 1) */
        {
          ASTSubstitutionImplementation0 jjtn001 = new ASTSubstitutionImplementation0(JJTSUBSTITUTIONIMPLEMENTATION0);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
	  (LOOKAHEAD(SubstitutionDevientElementDe()) SubstitutionDevientElementDe() 
	   | SubstitutionImplementation1()
	  ) 
	[RSubstitutionImplementation0()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	                                
}

void RSubstitutionImplementation0()                               : {/*@bgen(jjtree) RSubstitutionImplementation0 */
                                                                      ASTRSubstitutionImplementation0 jjtn000 = new ASTRSubstitutionImplementation0(JJTRSUBSTITUTIONIMPLEMENTATION0);
                                                                      boolean jjtc000 = true;
                                                                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RSubstitutionImplementation0 */
        try {
/*@egen*/
	<SemiColon> SubstitutionImplementation0()/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                  }
/*@egen*/ { jjtn000.setNodeName ("Sequence") ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionMachine1() : {} {
	  CallDefinitionSubstitution()
	| SubstitutionBeginMachine()
	| SubstitutionSkipMachine()    
	| SubstitutionAssertionMachine()
	| SubstitutionChoiceMachine()
	| SubstitutionIfMachine()
	| SubstitutionSelectMachine()
	| SubstitutionCaseMachine()              
	| SubstitutionAnyMachine()
	| SubstitutionLetMachine()  
	| SubstitutionSimpleMachine()      
}

void SubstitutionPreconditionMachine()                           : {/*@bgen(jjtree) SubstitutionPrecondition */
  ASTSubstitutionPrecondition jjtn000 = new ASTSubstitutionPrecondition(JJTSUBSTITUTIONPRECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionPrecondition */
        try {
/*@egen*/
	<Pre> Predicate() <Then> SubstitutionMachine0() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionBeginMachine()                    : {/*@bgen(jjtree) SubstitutionBegin */
  ASTSubstitutionBegin jjtn000 = new ASTSubstitutionBegin(JJTSUBSTITUTIONBEGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionBegin */
        try {
/*@egen*/
	<Begin> SubstitutionMachine0() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionSkipMachine()                   : {/*@bgen(jjtree) SubstitutionSkip */
  ASTSubstitutionSkip jjtn000 = new ASTSubstitutionSkip(JJTSUBSTITUTIONSKIP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionSkip */
        try {
/*@egen*/
	<Skip>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionSimpleMachine() : {} {
	   LOOKAHEAD(SubstitutionDevienEgalFonction()) SubstitutionDevienEgalFonction()     
	 | LOOKAHEAD(SubstitutionDevientElementDe()) SubstitutionDevientElementDe()
	 | LOOKAHEAD(SubstitutionDevientTelQue()) SubstitutionDevientTelQue()
	 | LOOKAHEAD(SubstitutionDevientEgalVariables()) SubstitutionDevientEgalVariables()
	 | SubstitutionCallOperation()

}

void Identifiers()              : {/*@bgen(jjtree) Identifiers */
  ASTIdentifiers jjtn000 = new ASTIdentifiers(JJTIDENTIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Identifiers */
        try {
/*@egen*/
	IdentifierComposed() (<Comma> IdentifierComposed())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionDevientEgalVariables()                                   : {/*@bgen(jjtree) SubstitutionBecomeEqualVariables */
  ASTSubstitutionBecomeEqualVariables jjtn000 = new ASTSubstitutionBecomeEqualVariables(JJTSUBSTITUTIONBECOMEEQUALVARIABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionBecomeEqualVariables */
        try {
/*@egen*/
	(CallDefinitionListExpression() | CallDefinitionExpression() | Identifiers()) <DevientEgal> 
		(LOOKAHEAD(Expression() <Comma>) ListExpression() | Expression())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void SubstitutionDevienEgalFonction()                                 : {/*@bgen(jjtree) SubstitutionBecomeEqualFunction */
  ASTSubstitutionBecomeEqualFunction jjtn000 = new ASTSubstitutionBecomeEqualFunction(JJTSUBSTITUTIONBECOMEEQUALFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionBecomeEqualFunction */
        try {
/*@egen*/
	LeftCallFunction() <DevientEgal> Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

void LeftCallFunction()                   : {/*@bgen(jjtree) LeftCallFunction */
  ASTLeftCallFunction jjtn000 = new ASTLeftCallFunction(JJTLEFTCALLFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) LeftCallFunction */
        try {
/*@egen*/
	Expr8() (CallFunction())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	   	
void SubstitutionDevientTelQue()                         : {/*@bgen(jjtree) SubstitutionBecomeSuch */
  ASTSubstitutionBecomeSuch jjtn000 = new ASTSubstitutionBecomeSuch(JJTSUBSTITUTIONBECOMESUCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionBecomeSuch */
        try {
/*@egen*/
	(CallDefinitionListExpression() | CallDefinitionExpression() | Identifiers()) <In> <OpenParen> Predicate() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void SubstitutionDevientElementDe()                    : {/*@bgen(jjtree) SubstitutionSetIn */
  ASTSubstitutionSetIn jjtn000 = new ASTSubstitutionSetIn(JJTSUBSTITUTIONSETIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionSetIn */
        try {
/*@egen*/
	(CallDefinitionListExpression() | CallDefinitionExpression() | Identifiers()) <SetIn> Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void SubstitutionCallOperation()                            : {/*@bgen(jjtree) SubstitutionCallOperation */
  ASTSubstitutionCallOperation jjtn000 = new ASTSubstitutionCallOperation(JJTSUBSTITUTIONCALLOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionCallOperation */
        try {
/*@egen*/
	[LOOKAHEAD (Resultats()) Resultats()] OperationName() [ParametresEffectifs()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ParametresEffectifs()             : {/*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Parameters */
        try {
/*@egen*/
	<OpenParen> PereListExpression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionCaseMachine()                   : {/*@bgen(jjtree) SubstitutionCase */
  ASTSubstitutionCase jjtn000 = new ASTSubstitutionCase(JJTSUBSTITUTIONCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionCase */
        try {
/*@egen*/
	<Case> Expression() <Of> 
	CaseEitherMachine() (CaseOrCMachine())* [ElseMachine()]  
	<End>
	<End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CaseEitherMachine()         : {/*@bgen(jjtree) Either */
  ASTEither jjtn000 = new ASTEither(JJTEITHER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Either */
        try {
/*@egen*/
	<Either> TermesSimples() ThenMachine()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CaseOrCMachine()     : {/*@bgen(jjtree) Or */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Or */
        try {
/*@egen*/
	<OrC> TermesSimples() ThenMachine()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionAssertionMachine()                        : {/*@bgen(jjtree) SubstitutionAssertion */
  ASTSubstitutionAssertion jjtn000 = new ASTSubstitutionAssertion(JJTSUBSTITUTIONASSERTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionAssertion */
        try {
/*@egen*/
	<Assert> Predicate() ThenMachine() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionChoiceMachine()                     : {/*@bgen(jjtree) SubstitutionChoice */
  ASTSubstitutionChoice jjtn000 = new ASTSubstitutionChoice(JJTSUBSTITUTIONCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionChoice */
        try {
/*@egen*/
	<Choice> SubstitutionMachine0() (<OrC> SubstitutionMachine0())* <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionIfMachine()                 : {/*@bgen(jjtree) SubstitutionIf */
  ASTSubstitutionIf jjtn000 = new ASTSubstitutionIf(JJTSUBSTITUTIONIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionIf */
        try {
/*@egen*/
	<If> Predicate() ThenMachine() 
	(ElseIfMachine())*
	[ElseMachine()] <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElseIfMachine()         : {/*@bgen(jjtree) ElseIf */
  ASTElseIf jjtn000 = new ASTElseIf(JJTELSEIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ElseIf */
        try {
/*@egen*/
	<Elsif> Predicate() ThenMachine()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionSelectMachine()                     : {/*@bgen(jjtree) SubstitutionSelect */
  ASTSubstitutionSelect jjtn000 = new ASTSubstitutionSelect(JJTSUBSTITUTIONSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionSelect */
        try {
/*@egen*/
	<Select> Predicate() ThenMachine()
	(WhenMachine())*
	[ElseMachine()] <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhenMachine()       : {/*@bgen(jjtree) When */
  ASTWhen jjtn000 = new ASTWhen(JJTWHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) When */
        try {
/*@egen*/
	<When> Predicate() ThenMachine()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionAnyMachine()                  : {/*@bgen(jjtree) SubstitutionAny */
  ASTSubstitutionAny jjtn000 = new ASTSubstitutionAny(JJTSUBSTITUTIONANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionAny */
        try {
/*@egen*/
	<Any> PereListIdent() <Where> Predicate() ThenMachine() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionLetMachine()                  : {/*@bgen(jjtree) SubstitutionLet */
  ASTSubstitutionLet jjtn000 = new ASTSubstitutionLet(JJTSUBSTITUTIONLET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionLet */
        try {
/*@egen*/
	<Let> PereListIdent() <Be> 
	DefinitionsLet () 
	<InLetVar> SubstitutionMachine0() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TermesSimples()             : {/*@bgen(jjtree) ListTermes */
  ASTListTermes jjtn000 = new ASTListTermes(JJTLISTTERMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ListTermes */
        try {
/*@egen*/
	TermeSimple() (<Comma> TermeSimple())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElseMachine()       : {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Else */
        try {
/*@egen*/
	<Else> SubstitutionMachine0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenMachine()       : {/*@bgen(jjtree) Then */
  ASTThen jjtn000 = new ASTThen(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Then */
        try {
/*@egen*/
	<Then> SubstitutionMachine0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefinitionsLet()                 : {/*@bgen(jjtree) LetDefinitions */
  ASTLetDefinitions jjtn000 = new ASTLetDefinitions(JJTLETDEFINITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) LetDefinitions */
        try {
/*@egen*/
	DefinitionLet() (<And> DefinitionLet())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefinitionLet()             : {/*@bgen(jjtree) Definition */
  ASTDefinition jjtn000 = new ASTDefinition(JJTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Definition */
        try {
/*@egen*/
	DefinitionLet1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefinitionLet1()        : {/*@bgen(jjtree) Equal */
  ASTEqual jjtn000 = new ASTEqual(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Equal */
        try {
/*@egen*/
	Identifier() <Equal> Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionRefinement1() : {} {
	  CallDefinitionSubstitution()
	| SubstitutionBeginRefinement()
	| SubstitutionSkipRefinement()    
	| SubstitutionAssertionRefinement()
	| SubstitutionChoiceRefinement()
	| SubstitutionIfRefinement()
	| SubstitutionSelectRefinement()
	| SubstitutionCaseRefinement()              
	| SubstitutionAnyRefinement()
	| SubstitutionLetRefinement()  
	| SubstitutionVarRefinement()
	| SubstitutionSimpleRefinement()      
}

void SubstitutionVarRefinement()                  : {/*@bgen(jjtree) SubstitutionVar */
  ASTSubstitutionVar jjtn000 = new ASTSubstitutionVar(JJTSUBSTITUTIONVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionVar */
        try {
/*@egen*/
	<Var> PereListIdent() <InLetVar> SubstitutionRefinement0() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionPreconditionRefinement()                           : {/*@bgen(jjtree) SubstitutionPrecondition */
  ASTSubstitutionPrecondition jjtn000 = new ASTSubstitutionPrecondition(JJTSUBSTITUTIONPRECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionPrecondition */
        try {
/*@egen*/
	<Pre> Predicate() <Then> SubstitutionRefinement0() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionBeginRefinement()                    : {/*@bgen(jjtree) SubstitutionBegin */
  ASTSubstitutionBegin jjtn000 = new ASTSubstitutionBegin(JJTSUBSTITUTIONBEGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionBegin */
        try {
/*@egen*/
	<Begin> SubstitutionRefinement0() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionSkipRefinement()                   : {/*@bgen(jjtree) SubstitutionSkip */
  ASTSubstitutionSkip jjtn000 = new ASTSubstitutionSkip(JJTSUBSTITUTIONSKIP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionSkip */
        try {
/*@egen*/
	<Skip>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionSimpleRefinement() : {} {
	   LOOKAHEAD(SubstitutionDevienEgalFonction()) SubstitutionDevienEgalFonction()     
	 | LOOKAHEAD(SubstitutionDevientElementDe()) SubstitutionDevientElementDe()
	 | LOOKAHEAD(SubstitutionDevientEgalVariables()) SubstitutionDevientEgalVariables()
	 | LOOKAHEAD(SubstitutionDevientTelQue()) SubstitutionDevientTelQue()
	 | SubstitutionCallOperation()

}

void SubstitutionCaseRefinement()                   : {/*@bgen(jjtree) SubstitutionCase */
  ASTSubstitutionCase jjtn000 = new ASTSubstitutionCase(JJTSUBSTITUTIONCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionCase */
        try {
/*@egen*/
	<Case> Expression() <Of> 
	CaseEitherRefinement() (CaseOrCRefinement())* [ElseRefinement()]  
	<End>
	<End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CaseEitherRefinement()         : {/*@bgen(jjtree) Either */
  ASTEither jjtn000 = new ASTEither(JJTEITHER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Either */
        try {
/*@egen*/
	<Either> TermesSimples() ThenRefinement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CaseOrCRefinement()     : {/*@bgen(jjtree) Or */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Or */
        try {
/*@egen*/
	<OrC> TermesSimples() ThenRefinement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionAssertionRefinement()                        : {/*@bgen(jjtree) SubstitutionAssertion */
  ASTSubstitutionAssertion jjtn000 = new ASTSubstitutionAssertion(JJTSUBSTITUTIONASSERTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionAssertion */
        try {
/*@egen*/
	<Assert> Predicate() ThenRefinement() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionChoiceRefinement()                     : {/*@bgen(jjtree) SubstitutionChoice */
  ASTSubstitutionChoice jjtn000 = new ASTSubstitutionChoice(JJTSUBSTITUTIONCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionChoice */
        try {
/*@egen*/
	<Choice> SubstitutionRefinement0() (<OrC> SubstitutionRefinement0())* <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionIfRefinement()                 : {/*@bgen(jjtree) SubstitutionIf */
  ASTSubstitutionIf jjtn000 = new ASTSubstitutionIf(JJTSUBSTITUTIONIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionIf */
        try {
/*@egen*/
	<If> Predicate() ThenRefinement() 
	(ElseIfRefinement())*
	[ElseRefinement()] <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElseIfRefinement()         : {/*@bgen(jjtree) ElseIf */
  ASTElseIf jjtn000 = new ASTElseIf(JJTELSEIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ElseIf */
        try {
/*@egen*/
	<Elsif> Predicate() ThenRefinement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionSelectRefinement()                     : {/*@bgen(jjtree) SubstitutionSelect */
  ASTSubstitutionSelect jjtn000 = new ASTSubstitutionSelect(JJTSUBSTITUTIONSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionSelect */
        try {
/*@egen*/
	<Select> Predicate() ThenRefinement()
	(WhenRefinement())*
	[ElseRefinement()] <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhenRefinement()       : {/*@bgen(jjtree) When */
  ASTWhen jjtn000 = new ASTWhen(JJTWHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) When */
        try {
/*@egen*/
	<When> Predicate() ThenRefinement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionAnyRefinement()                  : {/*@bgen(jjtree) SubstitutionAny */
  ASTSubstitutionAny jjtn000 = new ASTSubstitutionAny(JJTSUBSTITUTIONANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionAny */
        try {
/*@egen*/
	<Any> PereListIdent() <Where> Predicate() ThenRefinement() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionLetRefinement()                  : {/*@bgen(jjtree) SubstitutionLet */
  ASTSubstitutionLet jjtn000 = new ASTSubstitutionLet(JJTSUBSTITUTIONLET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionLet */
        try {
/*@egen*/
	<Let> PereListIdent() <Be> 
	DefinitionsLet () 
	<InLetVar> SubstitutionRefinement0() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElseRefinement()       : {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Else */
        try {
/*@egen*/
	<Else> SubstitutionRefinement0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenRefinement()       : {/*@bgen(jjtree) Then */
  ASTThen jjtn000 = new ASTThen(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Then */
        try {
/*@egen*/
	<Then> SubstitutionRefinement0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionImplementation1() : {} {
	  CallDefinitionSubstitution()
	| SubstitutionBeginImplementation()
	| SubstitutionSkipImplementation()    
	| SubstitutionAssertionImplementation()
	| SubstitutionIfImplementation()
	| SubstitutionCaseImplementation()              
	| SubstitutionWhileImplementation()  
	| SubstitutionVarImplementation()
	| SubstitutionSimpleImplementation()    
}

void SubstitutionVarImplementation()                  : {/*@bgen(jjtree) SubstitutionVar */
  ASTSubstitutionVar jjtn000 = new ASTSubstitutionVar(JJTSUBSTITUTIONVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionVar */
        try {
/*@egen*/
	<Var> PereListIdent() <InLetVar> SubstitutionImplementation0() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionBeginImplementation()                    : {/*@bgen(jjtree) SubstitutionBegin */
  ASTSubstitutionBegin jjtn000 = new ASTSubstitutionBegin(JJTSUBSTITUTIONBEGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionBegin */
        try {
/*@egen*/
	<Begin> SubstitutionImplementation0() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionSkipImplementation()                   : {/*@bgen(jjtree) SubstitutionSkip */
  ASTSubstitutionSkip jjtn000 = new ASTSubstitutionSkip(JJTSUBSTITUTIONSKIP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionSkip */
        try {
/*@egen*/
	<Skip>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionSimpleImplementation() : {} {
	 LOOKAHEAD(SubstitutionDevientEgalVariablesImplementation()) SubstitutionDevientEgalVariablesImplementation()
	 | SubstitutionCallOperationImplementation()
}

void SubstitutionDevientEgalVariablesImplementation()                                   : {/*@bgen(jjtree) SubstitutionBecomeEqualVariables */
  ASTSubstitutionBecomeEqualVariables jjtn000 = new ASTSubstitutionBecomeEqualVariables(JJTSUBSTITUTIONBECOMEEQUALVARIABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionBecomeEqualVariables */
          try {
/*@egen*/
	  LOOKAHEAD(ArrayElement()) ArrayElement() <DevientEgal> Terme()
	| IdentifierComposed() <DevientEgal> ValueTerme()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void ArrayElement()               : {/*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ArrayElement */
        try {
/*@egen*/
	IdentifierComposed() <OpenParen> IndexOfElement() <CloseParen> (<OpenParen> IndexOfElement() <CloseParen>)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IndexOfElement() : {} {/*@bgen(jjtree) #IndexOfElement(> 1) */
        {
          ASTIndexOfElement jjtn001 = new ASTIndexOfElement(JJTINDEXOFELEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(    LOOKAHEAD(TermeSimple() <Maplet>) TermeSimple() RIndexOfElement() 
	   | Terme()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	                   
}

void RIndexOfElement()                  : {/*@bgen(jjtree) RIndexOfElement */
                                            ASTRIndexOfElement jjtn000 = new ASTRIndexOfElement(JJTRINDEXOFELEMENT);
                                            boolean jjtc000 = true;
                                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RIndexOfElement */
        try {
/*@egen*/
	<Maplet> { jjtn000.setNodeName ("OrderedPair") ; } IndexOfElement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionCallOperationImplementation()                            : {/*@bgen(jjtree) SubstitutionCallOperation */
  ASTSubstitutionCallOperation jjtn000 = new ASTSubstitutionCallOperation(JJTSUBSTITUTIONCALLOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionCallOperation */
        try {
/*@egen*/
	[LOOKAHEAD (Resultats()) Resultats()] OperationName() [ParametresEffectifsImplementation()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ParametresEffectifsImplementation()             : {/*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Parameters */
        try {
/*@egen*/
	<OpenParen> ListTermeString() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListTermeString()                   : {/*@bgen(jjtree) ListeTermeString */
  ASTListeTermeString jjtn000 = new ASTListeTermeString(JJTLISTETERMESTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ListeTermeString */
        try {
/*@egen*/
	(Terme() | StringB()) (<Comma> (Terme() | StringB()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionCaseImplementation()                   : {/*@bgen(jjtree) SubstitutionCase */
  ASTSubstitutionCase jjtn000 = new ASTSubstitutionCase(JJTSUBSTITUTIONCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionCase */
        try {
/*@egen*/
	<Case> Expression() <Of> 
	CaseEitherImplementation() (CaseOrCImplementation())* [ElseImplementation()]  
	<End>
	<End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CaseEitherImplementation()         : {/*@bgen(jjtree) Either */
  ASTEither jjtn000 = new ASTEither(JJTEITHER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Either */
        try {
/*@egen*/
	<Either> TermesSimples() ThenImplementation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CaseOrCImplementation()     : {/*@bgen(jjtree) Or */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Or */
        try {
/*@egen*/
	<OrC> TermesSimples() ThenImplementation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionAssertionImplementation()                        : {/*@bgen(jjtree) SubstitutionAssertion */
  ASTSubstitutionAssertion jjtn000 = new ASTSubstitutionAssertion(JJTSUBSTITUTIONASSERTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionAssertion */
        try {
/*@egen*/
	<Assert> Predicate() ThenImplementation() <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionIfImplementation()                 : {/*@bgen(jjtree) SubstitutionIf */
  ASTSubstitutionIf jjtn000 = new ASTSubstitutionIf(JJTSUBSTITUTIONIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionIf */
        try {
/*@egen*/
	<If> Condition() ThenImplementation() 
	(ElseIfImplementation())*
	[ElseImplementation()] <End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElseIfImplementation()         : {/*@bgen(jjtree) ElseIf */
  ASTElseIf jjtn000 = new ASTElseIf(JJTELSEIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ElseIf */
        try {
/*@egen*/
	<Elsif> Predicate() ThenImplementation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElseImplementation()       : {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Else */
        try {
/*@egen*/
	<Else> SubstitutionImplementation0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenImplementation()       : {/*@bgen(jjtree) Then */
  ASTThen jjtn000 = new ASTThen(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Then */
        try {
/*@egen*/
	<Then> SubstitutionImplementation0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubstitutionWhileImplementation()                    : {/*@bgen(jjtree) SubstitutionWhile */
  ASTSubstitutionWhile jjtn000 = new ASTSubstitutionWhile(JJTSUBSTITUTIONWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) SubstitutionWhile */
        try {
/*@egen*/
	<While> Condition() <Do> SubstitutionImplementation0() 
	<Invariant> Predicate()
	<Variant> Expression()
	<End>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Condition() : {} {
 	Condition0() 
}

void Condition0() : {} {/*@bgen(jjtree) #Condition0(> 1) */
        {
          ASTCondition0 jjtn001 = new ASTCondition0(JJTCONDITION0);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
 	(Condition1() [RCondition0()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	               
}

void RCondition0()              : {/*@bgen(jjtree) RCondition0 */
                                    ASTRCondition0 jjtn000 = new ASTRCondition0(JJTRCONDITION0);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RCondition0 */
        try {
/*@egen*/
	(  <Or>   { jjtn000.setNodeName ("Or") ; }
	 | <And>  { jjtn000.setNodeName ("And") ; }
	) Condition0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Condition1() : {} {
	   CallDefinitionPredicate() 
	 | Not()
	 | ConditionParenthesee ()
	 | LOOKAHEAD (Condition21 ()) Condition21 ()
	 | Condition22()
}

void ConditionNot ()      : {/*@bgen(jjtree) Not */
  ASTNot jjtn000 = new ASTNot(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Not */
        try {
/*@egen*/
	<Not> <OpenParen> Predicate() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ConditionParenthesee ()                       : {/*@bgen(jjtree) PredicateParenthesis */
  ASTPredicateParenthesis jjtn000 = new ASTPredicateParenthesis(JJTPREDICATEPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PredicateParenthesis */
        try {
/*@egen*/
	<OpenParen> Predicate() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Condition21()             : {/*@bgen(jjtree) Condition2 */
                                   ASTCondition2 jjtn000 = new ASTCondition2(JJTCONDITION2);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) Condition2 */
        try {
/*@egen*/
	ExpressionArithmetique()
 	  (  <LessThan>            { jjtn000.setNodeName ("LessThan") ; }
           | <LessThanOrEqual>     { jjtn000.setNodeName ("LessThanOrEqual") ; } 
	   | <GreatherThan> 	   { jjtn000.setNodeName ("GreatherThan") ; }
	   | <GreatherThanOrEqual> { jjtn000.setNodeName ("GreatherThanOrEqual") ; }
           | <NotEqual> 	   { jjtn000.setNodeName ("NotEqual") ; }
           | <Equal> 		   { jjtn000.setNodeName ("Equal") ; }  
          ) 
	ExpressionArithmetique()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	 
}

void Condition22()             : {/*@bgen(jjtree) Condition2 */
                                   ASTCondition2 jjtn000 = new ASTCondition2(JJTCONDITION2);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) Condition2 */
        try {
/*@egen*/
	(BooleenLitteral() | ConditionExprArith() | IdentifierComposed())
 	  (   <NotEqual> 	   { jjtn000.setNodeName ("NotEqual") ; }
            | <Equal> 		   { jjtn000.setNodeName ("Equal") ; }  
          ) 
	(BooleenLitteral() | ConditionExprArith() | IdentifierComposed())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	 
}

void ValueTerme() : {} {
	  CallDefinitionExpression()
	| BooleenLitteral()
	| ConditionExprArith()
/*	| LOOKAHEAD(CallInTerme()) CallInTerme() */

	| LOOKAHEAD(UnionSetImplementation()) UnionSetImplementation()
	| ExtensionSetImplementation1()
	| IntegerSetImplementation()
	| ExpressionArithmetique()
}

void Terme() : {} {
	  CallDefinitionExpression()
	| BooleenLitteral()
	| ConditionExprArith()
	| ExpressionArithmetique()
}

void CallInTerme()              : {/*@bgen(jjtree) CallInTerme */
  ASTCallInTerme jjtn000 = new ASTCallInTerme(JJTCALLINTERME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) CallInTerme */
        try {
/*@egen*/
	IdentifierComposed() <OpenParen> IndexOfElement() <CloseParen> (<OpenParen> IndexOfElement() <CloseParen>)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TermeSimple() : {} {
	 BooleenLitteral()
	| EntierLitteral()
	| IdentifierComposed()
}

void ArrayExpression() : {} {
	  LOOKAHEAD(UnionSetImplementation()) UnionSetImplementation()
	| ExtensionSetImplementation1()
}

void Plage() : {} {
	LOOKAHEAD (Intervalle()) Intervalle()
	| ExtensionSetImplementation2() 
	| LOOKAHEAD (IdentifierComposed() <Product> <OpenBraces>) IdentifierComposed()
	| LOOKAHEAD (ExpressionArithmetique()) ExpressionArithmetique() 
	| IntegerSetImplementation()
}

void UnionSetImplementation() : {} {/*@bgen(jjtree) #UnionSetImplementation(> 1) */
        {
          ASTUnionSetImplementation jjtn001 = new ASTUnionSetImplementation(JJTUNIONSETIMPLEMENTATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(ElementUnionSetImplementation() [RUnionSetImplementation()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	                           
}

void RUnionSetImplementation()                          : {/*@bgen(jjtree) RUnionSetImplementation */
                                                            ASTRUnionSetImplementation jjtn000 = new ASTRUnionSetImplementation(JJTRUNIONSETIMPLEMENTATION);
                                                            boolean jjtc000 = true;
                                                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RUnionSetImplementation */
        try {
/*@egen*/
	<Union> { jjtn000.setNodeName ("Union") ; } UnionSetImplementation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElementUnionSetImplementation() : {} {/*@bgen(jjtree) #ElementUnionSetImplementation(> 1) */
         {
           ASTElementUnionSetImplementation jjtn001 = new ASTElementUnionSetImplementation(JJTELEMENTUNIONSETIMPLEMENTATION);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/
	 (LOOKAHEAD(Plage()) Plage() [RElementUnionSetImplementation()] | <OpenBraces> Terme() <CloseBraces>)/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
           }
         }
/*@egen*/
	                                  
}

void RElementUnionSetImplementation()                         : {/*@bgen(jjtree) RElementImplementation */
                                                                  ASTRElementImplementation jjtn000 = new ASTRElementImplementation(JJTRELEMENTIMPLEMENTATION);
                                                                  boolean jjtc000 = true;
                                                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RElementImplementation */
        try {
/*@egen*/
	<Product> { jjtn000.setNodeName ("CartesianProduct") ; } ElementUnionSetImplementation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExtensionSetImplementation1()               : {/*@bgen(jjtree) ExtensionSet */
  ASTExtensionSet jjtn000 = new ASTExtensionSet(JJTEXTENSIONSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ExtensionSet */
        try {
/*@egen*/
	<OpenBraces> ListElementImplementation1() <CloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void ListElementImplementation1()                 : {/*@bgen(jjtree) ListExpression */
  ASTListExpression jjtn000 = new ASTListExpression(JJTLISTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ListExpression */
        try {
/*@egen*/
        (<OpenParen> ElementImplementation() <CloseParen> | ElementImplementation())
	    (<Comma> (<OpenParen> ElementImplementation() <CloseParen> | ElementImplementation()))*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
	
}

void ElementImplementation() : {} {/*@bgen(jjtree) #ElementImplementation(> 1) */
        {
          ASTElementImplementation jjtn001 = new ASTElementImplementation(JJTELEMENTIMPLEMENTATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(   LOOKAHEAD(TermeSimple() <Maplet>) TermeSimple() RElementImplementation() 
	   | ExtensionSetImplementation1()
	   | Terme()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	                          
}

void RElementImplementation()                         : {/*@bgen(jjtree) RElementImplementation */
                                                          ASTRElementImplementation jjtn000 = new ASTRElementImplementation(JJTRELEMENTIMPLEMENTATION);
                                                          boolean jjtc000 = true;
                                                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RElementImplementation */
        try {
/*@egen*/
	<Maplet> { jjtn000.setNodeName ("OrderedPair") ; } ElementImplementation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExtensionSetImplementation2()               : {/*@bgen(jjtree) ExtensionSet */
  ASTExtensionSet jjtn000 = new ASTExtensionSet(JJTEXTENSIONSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ExtensionSet */
        try {
/*@egen*/
	<OpenBraces> ListElementImplementation2() <CloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListElementImplementation2()                 : {/*@bgen(jjtree) ListExpression */
  ASTListExpression jjtn000 = new ASTListExpression(JJTLISTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ListExpression */
        try {
/*@egen*/
	TermeSimple() (<Comma> TermeSimple())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Intervalle()           : {/*@bgen(jjtree) NatRange */
  ASTNatRange jjtn000 = new ASTNatRange(JJTNATRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) NatRange */
        try {
/*@egen*/
	LOOKAHEAD(ExpressionArithmetique()) ExpressionArithmetique() <NatRange> ExpressionArithmetique()
	| <OpenParen> ExpressionArithmetique() <NatRange> ExpressionArithmetique() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExpressionArithmetique() : {} {
	ExprArith()
}

void ExprArith() : {} {/*@bgen(jjtree) #ExprArith(> 1) */
        {
          ASTExprArith jjtn001 = new ASTExprArith(JJTEXPRARITH);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(ExprArith0() [RExprArith()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	              
}

void RExprArith()             : {/*@bgen(jjtree) RExprArith */
                                  ASTRExprArith jjtn000 = new ASTRExprArith(JJTREXPRARITH);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExprArith */
        try {
/*@egen*/
	(  <Plus>    { jjtn000.setNodeName ("Plus") ; }
	 | <Minus>   { jjtn000.setNodeName ("Minus") ; }
	) ExprArith()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExprArith0() : {} {/*@bgen(jjtree) #ExprArith0(> 1) */
        {
          ASTExprArith0 jjtn001 = new ASTExprArith0(JJTEXPRARITH0);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ 
	(ExprArith1() [RExprArith0()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	               
}

void RExprArith0()              : {/*@bgen(jjtree) RExprArith0 */
                                    ASTRExprArith0 jjtn000 = new ASTRExprArith0(JJTREXPRARITH0);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExprArith0 */
        try {
/*@egen*/
	(  <Product>  { jjtn000.setNodeName ("Product") ; }
 	 | <Division> { jjtn000.setNodeName ("Division") ; }
	 | <Modulo>   { jjtn000.setNodeName ("Modulo") ; }
	) ExprArith0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExprArith1() : {} {/*@bgen(jjtree) #ExprArith1(> 1) */
        {
          ASTExprArith1 jjtn001 = new ASTExprArith1(JJTEXPRARITH1);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(ExprArith2() [RExprArith1()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	               
}

void RExprArith1()              : {/*@bgen(jjtree) RExprArith1 */
                                    ASTRExprArith1 jjtn000 = new ASTRExprArith1(JJTREXPRARITH1);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExprArith1 */
        try {
/*@egen*/
	<Power> ExprArith2()/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.setNodeName ("Power") ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExprArith2() : {} {/*@bgen(jjtree) #ExprArith2(> 1) */
        {
          ASTExprArith2 jjtn001 = new ASTExprArith2(JJTEXPRARITH2);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	([RExprArith2()] ExprArith3())/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	               
}

void RExprArith2()              : {/*@bgen(jjtree) RExprArith2 */
                                    ASTRExprArith2 jjtn000 = new ASTRExprArith2(JJTREXPRARITH2);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExprArith2 */
        try {
/*@egen*/
	<Minus>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.setNodeName ("UnaryMinus") ; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExprArith3() : {} {
	  EntierLitteral()
	| LOOKAHEAD(CallInTerme()) CallInTerme()
	| IdentifierComposed()
	| SuccArith()
	| PredArith()
	| ExpParenArith ()
}

void ExpParenArith ()                        : {/*@bgen(jjtree) ExpressionParenthesis */
  ASTExpressionParenthesis jjtn000 = new ASTExpressionParenthesis(JJTEXPRESSIONPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ExpressionParenthesis */
        try {
/*@egen*/
	<OpenParen> ExpressionArithmetique() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SuccArith()       : {/*@bgen(jjtree) Succ */
  ASTSucc jjtn000 = new ASTSucc(JJTSUCC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Succ */
        try {
/*@egen*/
	<Succ> <OpenParen> ExpressionArithmetique() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredArith()       : {/*@bgen(jjtree) Pred */
  ASTPred jjtn000 = new ASTPred(JJTPRED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Pred */
        try {
/*@egen*/
	<Pred> <OpenParen> ExpressionArithmetique() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ConditionExprArith()                      : {/*@bgen(jjtree) ConditionExpression */
  ASTConditionExpression jjtn000 = new ASTConditionExpression(JJTCONDITIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ConditionExpression */
        try {
/*@egen*/
	<Bool> <OpenParen> Condition() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Predicate() : {} {
	PredLevel()
}

void PredLevel() : {} {/*@bgen(jjtree) #PredLevel(> 1) */
        {
          ASTPredLevel jjtn001 = new ASTPredLevel(JJTPREDLEVEL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
 	(PredLevel0() [RPredLevel()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	               
}

void RPredLevel()             : {/*@bgen(jjtree) RPredLevel */
                                  ASTRPredLevel jjtn000 = new ASTRPredLevel(JJTRPREDLEVEL);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RPredLevel */
        try {
/*@egen*/
 	<Implication> PredLevel()/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ { jjtn000.setNodeName ("Implication") ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredLevel0() : {} {/*@bgen(jjtree) #PredLevel0(> 1) */
        {
          ASTPredLevel0 jjtn001 = new ASTPredLevel0(JJTPREDLEVEL0);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
 	(PredLevel1() [RPredLevel0()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	               
}

void RPredLevel0()              : {/*@bgen(jjtree) RPredLevel0 */
                                    ASTRPredLevel0 jjtn000 = new ASTRPredLevel0(JJTRPREDLEVEL0);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RPredLevel0 */
        try {
/*@egen*/
	(  <Or>   { jjtn000.setNodeName ("Or") ; }
	 | <And>  { jjtn000.setNodeName ("And") ; }
	) PredLevel0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredLevel1() : {} {/*@bgen(jjtree) #PredLevel1(> 1) */
        {
          ASTPredLevel1 jjtn001 = new ASTPredLevel1(JJTPREDLEVEL1);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(PredLevel2() [RPredLevel1()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	               
}

void RPredLevel1()              : {/*@bgen(jjtree) RPredLevel1 */
                                    ASTRPredLevel1 jjtn000 = new ASTRPredLevel1(JJTRPREDLEVEL1);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RPredLevel1 */
        try {
/*@egen*/
 	<Equivalence> PredLevel1()/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { jjtn000.setNodeName ("Equivalence") ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredLevel2() : {} {
	   CallDefinitionPredicate()
         | LOOKAHEAD(<Forall>  <OpenParen>) ForAll1()
	 | ForAll2() 
	 | LOOKAHEAD(<Exists>  <OpenParen>) Exists1()
	 | Exists2() 
	 | Not()
	 | LOOKAHEAD(Expression() (<LessThan> | <LessThanOrEqual> | <GreatherThan> 	   
	     | <GreatherThanOrEqual> | <NotEqual> | <Equal>)) Comparaison()
	 | LOOKAHEAD(PereListExpression() (<In> | <NotSetMemberShip> | <Subset> 	           { jjtn000.setNodeName ("Subset") ; }
            | <StrictSubset> | <NotSubset> | <NotStrictSubset>)) PredicatEnsemblisteSimple()  
	 | PredicatParenthese () 
}

void ForAll1 ()         : {/*@bgen(jjtree) ForAll */
  ASTForAll jjtn000 = new ASTForAll(JJTFORALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ForAll */
        try {
/*@egen*/
	<Forall>  <OpenParen> PereListIdent() <CloseParen> <Point> <OpenParen> ImplicationInForAll() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ForAll2 ()         : {/*@bgen(jjtree) ForAll */
  ASTForAll jjtn000 = new ASTForAll(JJTFORALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ForAll */
        try {
/*@egen*/
	<Forall> Identifier() <Point> <OpenParen> ImplicationInForAll() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ImplicationInForAll ()              : {/*@bgen(jjtree) Implication */
  ASTImplication jjtn000 = new ASTImplication(JJTIMPLICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Implication */
        try {
/*@egen*/
	PredLevel0() <Implication> PredLevel0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Exists1 ()         : {/*@bgen(jjtree) Exists */
  ASTExists jjtn000 = new ASTExists(JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Exists */
        try {
/*@egen*/
	<Exists>  <OpenParen> PereListIdent() <CloseParen> <Point> <OpenParen> Predicate() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Exists2 ()         : {/*@bgen(jjtree) Exists */
  ASTExists jjtn000 = new ASTExists(JJTEXISTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Exists */
        try {
/*@egen*/
	<Exists>  Identifier() <Point> <OpenParen> Predicate() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Not ()      : {/*@bgen(jjtree) Not */
  ASTNot jjtn000 = new ASTNot(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Not */
        try {
/*@egen*/
	<Not> <OpenParen> Predicate() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredicatParenthese ()                       : {/*@bgen(jjtree) PredicateParenthesis */
  ASTPredicateParenthesis jjtn000 = new ASTPredicateParenthesis(JJTPREDICATEPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PredicateParenthesis */
        try {
/*@egen*/
	<OpenParen> Predicate() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PredLevel3() : {} {
	  LOOKAHEAD(Comparaison()) Comparaison()
	| PredicatEnsemblisteSimple()
}

void Comparaison()             : {/*@bgen(jjtree) PredLevel3 */
                                   ASTPredLevel3 jjtn000 = new ASTPredLevel3(JJTPREDLEVEL3);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) PredLevel3 */
          try {
/*@egen*/
	  Expression()   
 	    (  <LessThan>            { jjtn000.setNodeName ("LessThan") ; }
             | <LessThanOrEqual>     { jjtn000.setNodeName ("LessThanOrEqual") ; } 
	     | <GreatherThan> 	   { jjtn000.setNodeName ("GreatherThan") ; }
	     | <GreatherThanOrEqual> { jjtn000.setNodeName ("GreatherThanOrEqual") ; }
             | <NotEqual> 	   { jjtn000.setNodeName ("NotEqual") ; }
             | <Equal> 		   { jjtn000.setNodeName ("Equal") ; }
	    )
	   Expression()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void PredicatEnsemblisteSimple()             : {/*@bgen(jjtree) PredLevel3 */
                                                 ASTPredLevel3 jjtn000 = new ASTPredLevel3(JJTPREDLEVEL3);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) PredLevel3 */
         try {
/*@egen*/
	 PereListExpression()
	   ( 
             <In> 		   { jjtn000.setNodeName ("In") ; }
            | <NotSetMemberShip>    { jjtn000.setNodeName ("NotSetMemberShip") ; }
            | <Subset> 	           { jjtn000.setNodeName ("Subset") ; }
            | <StrictSubset> 	   { jjtn000.setNodeName ("StrictSubset") ; }
            | <NotSubset> 	   { jjtn000.setNodeName ("NotSubset") ; }
            | <NotStrictSubset>     { jjtn000.setNodeName ("NotStrictSubset") ; }
           ) 
	  Expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/	 
}

void Expression() : {} {
	Expr()
}

void Expr () : {} {/*@bgen(jjtree) #Expr(> 1) */
        {
          ASTExpr jjtn001 = new ASTExpr(JJTEXPR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(Expr0() [RExpr()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	         
}

void RExpr()        : {/*@bgen(jjtree) RExpr */
                        ASTRExpr jjtn000 = new ASTRExpr(JJTREXPR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExpr */
           try {
/*@egen*/
	   <ParallelProduct> Expr()/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { jjtn000.setNodeName ("ParallelProduct") ; }
	 | <Composition> Expr()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ { jjtn000.setNodeName ("Composition") ; }/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
             }
           }
/*@egen*/
}

void Expr0() : {} {/*@bgen(jjtree) #Expr0(> 1) */
        {
          ASTExpr0 jjtn001 = new ASTExpr0(JJTEXPR0);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(Expr1() [RExpr0()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	          
}

void RExpr0()         : {/*@bgen(jjtree) RExpr0 */
                          ASTRExpr0 jjtn000 = new ASTRExpr0(JJTREXPR0);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExpr0 */
        try {
/*@egen*/
	(  <Relation> { jjtn000.setNodeName ("Relation") ; }
	 | <TotalFunction> { jjtn000.setNodeName ("TotalFunction") ; }
         | <PartialFunction> { jjtn000.setNodeName ("PartialFunction") ; }
	 | <TotalSurjection> { jjtn000.setNodeName ("TotalSurjection") ; }
         | <PartialSurjection> { jjtn000.setNodeName ("PartialSurjection") ; }
         | <TotalInjection> { jjtn000.setNodeName ("TotalInjection") ; }
         | <PartialInjection> { jjtn000.setNodeName ("PartialInjection") ; }
         | <TotalBijection> { jjtn000.setNodeName ("TotalBijection") ; }
         | <PartialBijection> { jjtn000.setNodeName ("PartialBijection") ; }
        ) Expr0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr1() : {} {/*@bgen(jjtree) #Expr1(> 1) */
        {
          ASTExpr1 jjtn001 = new ASTExpr1(JJTEXPR1);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(Expr2() [RExpr1()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	          
}

void RExpr1()         : {/*@bgen(jjtree) RExpr1 */
                          ASTRExpr1 jjtn000 = new ASTRExpr1(JJTREXPR1);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExpr1 */
        try {
/*@egen*/
	(  <Union> { jjtn000.setNodeName ("Union") ; }
	 | <Intersection> { jjtn000.setNodeName ("Intersection") ; }
         | <Maplet> { jjtn000.setNodeName ("OrderedPair") ; }
	 | <Composition> { jjtn000.setNodeName ("Composition") ; }
         | <DirectProduct> { jjtn000.setNodeName ("DirectProduct") ; }
         | <DomainRestriction> { jjtn000.setNodeName ("DomainRestriction") ; }
         | <DomainSubstraction> { jjtn000.setNodeName ("DomainSubstraction") ; }
         | <RangeRestriction> { jjtn000.setNodeName ("RangeRestriction") ; }
         | <RangeSubstraction> { jjtn000.setNodeName ("RangeSubstraction") ; }
         | <Override> { jjtn000.setNodeName ("Overriding") ; }
         | <ConcatSequence> { jjtn000.setNodeName ("ConcatSequence") ; }
         | <AppendSequence> { jjtn000.setNodeName ("AppendSequence") ; }
         | <PrependSequence> { jjtn000.setNodeName ("PrependSequence") ; }
         | <PrefixSequence> { jjtn000.setNodeName ("PrefixSequence") ; }
         | <SuffixSequence> { jjtn000.setNodeName ("SuffixSequence") ; }
        ) Expr1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr2() : {} {/*@bgen(jjtree) #Expr2(> 1) */
        {
          ASTExpr2 jjtn001 = new ASTExpr2(JJTEXPR2);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(Expr3() [RExpr2()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	          
}

void RExpr2()         : {/*@bgen(jjtree) RExpr2 */
                          ASTRExpr2 jjtn000 = new ASTRExpr2(JJTREXPR2);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExpr2 */
        try {
/*@egen*/
	<NatRange> Expr2()/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { jjtn000.setNodeName ("NatRange") ; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr3() : {} {/*@bgen(jjtree) #Expr3(> 1) */
        {
          ASTExpr3 jjtn001 = new ASTExpr3(JJTEXPR3);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(Expr4() [RExpr3()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	          
}

void RExpr3()         : {/*@bgen(jjtree) RExpr3 */
                          ASTRExpr3 jjtn000 = new ASTRExpr3(JJTREXPR3);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExpr3 */
        try {
/*@egen*/
	(
	   <Minus> { jjtn000.setNodeName ("Minus") ; }
	 | <SetMinus> { jjtn000.setNodeName ("SetMinus") ; }
	 | <Plus> { jjtn000.setNodeName ("Plus") ; }
	) Expr3()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr4() : {} {/*@bgen(jjtree) #Expr4(> 1) */
        {
          ASTExpr4 jjtn001 = new ASTExpr4(JJTEXPR4);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(Expr5() [RExpr4()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	          
}

void RExpr4()         : {/*@bgen(jjtree) RExpr4 */
                          ASTRExpr4 jjtn000 = new ASTRExpr4(JJTREXPR4);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExpr4 */
        try {
/*@egen*/
	(
	   <Product>  { jjtn000.setNodeName ("Product") ; }
	 | <CartesianProduct> { jjtn000.setNodeName ("CartesianProduct") ; }
	 | <Division> { jjtn000.setNodeName ("Division") ; }
	 | <Modulo>   { jjtn000.setNodeName ("Modulo") ; }
	) Expr4()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr5() : {} {/*@bgen(jjtree) #Expr5(> 1) */
        {
          ASTExpr5 jjtn001 = new ASTExpr5(JJTEXPR5);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(Expr6() [RExpr5()])/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	          
}

void RExpr5()         : {/*@bgen(jjtree) RExpr5 */
                          ASTRExpr5 jjtn000 = new ASTRExpr5(JJTREXPR5);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExpr5 */
           try {
/*@egen*/
	   <Power>  Expr5()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { jjtn000.setNodeName ("Power") ; }/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
             }
           }
/*@egen*/
}

void Expr6() : {} {/*@bgen(jjtree) #Expr6(> 1) */
        {
          ASTExpr6 jjtn001 = new ASTExpr6(JJTEXPR6);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	([RExpr6()] Expr7())/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	          
}

void RExpr6()         : {/*@bgen(jjtree) RExpr6 */
                          ASTRExpr6 jjtn000 = new ASTRExpr6(JJTREXPR6);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) RExpr6 */
        try {
/*@egen*/
	<Minus>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.setNodeName ("UnaryMinus") ; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr7() : {} {/*@bgen(jjtree) #Expr7(> 1) */
         {
           ASTExpr7 jjtn001 = new ASTExpr7(JJTEXPR7);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/
	 (Expr8() (RExpr7())*)/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
           }
         }
/*@egen*/
	           
}

void RExpr7() : {} {
	(
	   Inverse() 
	 | Image() 
	 | CallFunction()
	) 
}

void Inverse()          : {/*@bgen(jjtree) Inverse */
  ASTInverse jjtn000 = new ASTInverse(JJTINVERSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Inverse */
        try {
/*@egen*/
	<Tilde>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Image()        : {/*@bgen(jjtree) Image */
  ASTImage jjtn000 = new ASTImage(JJTIMAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Image */
        try {
/*@egen*/
	<OpenCurly> Expression() <CloseCurly>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CallFunction()               : {/*@bgen(jjtree) CallFunction */
  ASTCallFunction jjtn000 = new ASTCallFunction(JJTCALLFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) CallFunction */
        try {
/*@egen*/
	<OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr8() : {} {
	  CallDefinitionExpression () 
	| PredicateExpression()   
	| ExpressionParenthesee ()
	| EmptySequence ()
	| EmptySequenceOld ()
	| ExtensionSequence ()
	| LOOKAHEAD (Sigma1 ()) Sigma1 ()
	| Sigma2 ()
	| LOOKAHEAD (Pi1 ()) Pi1 ()
	| Pi2 ()
	| LOOKAHEAD (UnionQuantifiee1 ()) UnionQuantifiee1 ()
	| UnionQuantifiee2 ()
	| LOOKAHEAD (IntersectionQuantifiee1 ()) IntersectionQuantifiee1 ()
	| IntersectionQuantifiee2 ()
	| LOOKAHEAD (Lambda1 ()) Lambda1 ()
	| Lambda2 ()
	| UnionGeneralisee ()
	| IntersectionGeneralisee ()
	| IntegerSet ()
	| EntierLitteral ()
	| BooleenLitteral ()
	| BooleanSet ()
	| StringSet ()
	| StringB ()
	| Succ ()
	| Pred ()
	| Max ()
	| Min ()
	| Card ()
	| Pow ()
	| Pow1 ()
	| Fin () 
	| Fin1 () 
	| Identity ()
	| Prj1 () 
	| Prj2 ()
	| Iterate ()
	| Closure ()
	| Closure1 ()
	| Domain ()
	| Range ()
	| Fnc ()
	| Rel ()
	| Seq ()
	| Seq1 ()
	| Iseq ()
	| Iseq1 ()
	| Perm () 
	| Size ()
	| First ()
	| Last ()
	| Front ()
	| Tail ()
	| Rev ()
	| Conc ()
	| IdentifierB () 
	| EmptySet ()
	| LOOKAHEAD(ComprehensionSet()) ComprehensionSet()
	| ExtensionSet()	  
}

void PredicateExpression()                      : {/*@bgen(jjtree) PredicateExpression */
  ASTPredicateExpression jjtn000 = new ASTPredicateExpression(JJTPREDICATEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PredicateExpression */
        try {
/*@egen*/
	<Bool> <OpenParen> Predicate() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void ExpressionParenthesee ()                        : {/*@bgen(jjtree) ExpressionParenthesis */
  ASTExpressionParenthesis jjtn000 = new ASTExpressionParenthesis(JJTEXPRESSIONPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ExpressionParenthesis */
        try {
/*@egen*/
	<OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EmptySequence ()                : {/*@bgen(jjtree) EmptySequence */
  ASTEmptySequence jjtn000 = new ASTEmptySequence(JJTEMPTYSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) EmptySequence */
        try {
/*@egen*/
	<EmptySequence>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EmptySequenceOld ()                : {/*@bgen(jjtree) EmptySequence */
  ASTEmptySequence jjtn000 = new ASTEmptySequence(JJTEMPTYSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) EmptySequence */
        try {
/*@egen*/
	<EmptySequenceOld>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExtensionSequence()                    : {/*@bgen(jjtree) ExtensionSequence */
  ASTExtensionSequence jjtn000 = new ASTExtensionSequence(JJTEXTENSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ExtensionSequence */
        try {
/*@egen*/
	<OpenCurly> PereListExpression() <CloseCurly>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Sigma1 ()        : {/*@bgen(jjtree) Sigma */
  ASTSigma jjtn000 = new ASTSigma(JJTSIGMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Sigma */
          try {
/*@egen*/
	  <Sigma> <OpenParen> PereListIdent() <CloseParen> <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Sigma2 ()        : {/*@bgen(jjtree) Sigma */
  ASTSigma jjtn000 = new ASTSigma(JJTSIGMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Sigma */
        try {
/*@egen*/
	<Sigma> Identifier () <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Pi1 ()     : {/*@bgen(jjtree) Pi */
  ASTPi jjtn000 = new ASTPi(JJTPI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Pi */
        try {
/*@egen*/
	<Pi> <OpenParen> PereListIdent() <CloseParen> <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Pi2 ()     : {/*@bgen(jjtree) Pi */
  ASTPi jjtn000 = new ASTPi(JJTPI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Pi */
        try {
/*@egen*/
	<Pi> Identifier() <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void UnionQuantifiee1 ()                  : {/*@bgen(jjtree) UnionQuantified */
  ASTUnionQuantified jjtn000 = new ASTUnionQuantified(JJTUNIONQUANTIFIED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) UnionQuantified */
        try {
/*@egen*/
	<UnionQuant> <OpenParen> PereListIdent() <CloseParen> <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void UnionQuantifiee2 ()                  : {/*@bgen(jjtree) UnionQuantified */
  ASTUnionQuantified jjtn000 = new ASTUnionQuantified(JJTUNIONQUANTIFIED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) UnionQuantified */
        try {
/*@egen*/
	<UnionQuant> Identifier() <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IntersectionQuantifiee1 ()                         : {/*@bgen(jjtree) IntersectionQuantified */
  ASTIntersectionQuantified jjtn000 = new ASTIntersectionQuantified(JJTINTERSECTIONQUANTIFIED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IntersectionQuantified */
        try {
/*@egen*/
	<InterQuant> <OpenParen> PereListIdent() <CloseParen> <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IntersectionQuantifiee2 ()                         : {/*@bgen(jjtree) IntersectionQuantified */
  ASTIntersectionQuantified jjtn000 = new ASTIntersectionQuantified(JJTINTERSECTIONQUANTIFIED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IntersectionQuantified */
        try {
/*@egen*/
	<InterQuant> Identifier() <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Lambda1 ()         : {/*@bgen(jjtree) Lambda */
  ASTLambda jjtn000 = new ASTLambda(JJTLAMBDA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Lambda */
        try {
/*@egen*/
	<Lambda> <OpenParen> PereListIdent() <CloseParen> <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Lambda2 ()         : {/*@bgen(jjtree) Lambda */
  ASTLambda jjtn000 = new ASTLambda(JJTLAMBDA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Lambda */
        try {
/*@egen*/
	<Lambda> Identifier() <Point> <OpenParen> Predicate() <SuchAs> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void UnionGeneralisee ()                   : {/*@bgen(jjtree) UnionGeneralized */
  ASTUnionGeneralized jjtn000 = new ASTUnionGeneralized(JJTUNIONGENERALIZED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) UnionGeneralized */
        try {
/*@egen*/
	<UnionGen> <OpenParen> PereListExpression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IntersectionGeneralisee ()                          : {/*@bgen(jjtree) IntersectionGeneralized */
  ASTIntersectionGeneralized jjtn000 = new ASTIntersectionGeneralized(JJTINTERSECTIONGENERALIZED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IntersectionGeneralized */
        try {
/*@egen*/
	<InterGen> <OpenParen> PereListExpression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IntegerSet ()             : {/*@bgen(jjtree) IntegerSet */
                                   ASTIntegerSet jjtn000 = new ASTIntegerSet(JJTINTEGERSET);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) IntegerSet */
        try {
/*@egen*/
	(  t = <Integer>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/  { jjtn000.setNodeName (t.image) ; }
	 | t = <Natural1>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { jjtn000.setNodeName (t.image) ; }
	 | t = <Natural>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/  { jjtn000.setNodeName (t.image) ; }
	 | t = <Nat>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/      { jjtn000.setNodeName (t.image) ; }
	 | t = <Nat1>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/     { jjtn000.setNodeName (t.image) ; }
	 | t = <Int>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/      { jjtn000.setNodeName (t.image) ; }
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IntegerSetImplementation ()             : {/*@bgen(jjtree) IntegerSet */
                                                 ASTIntegerSet jjtn000 = new ASTIntegerSet(JJTINTEGERSET);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) IntegerSet */
        try {
/*@egen*/
	(  t = <Nat>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/      { jjtn000.setNodeName (t.image) ; }
	 | t = <Nat1>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/     { jjtn000.setNodeName (t.image) ; }
	 | t = <Int>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/      { jjtn000.setNodeName (t.image) ; }
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EntierLitteral()          : {/*@bgen(jjtree) Integer */
                                   ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	(
	   t = <Number>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.setNodeName (t.image) ; }
	 | t = <MaxInt>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.setNodeName (t.image) ; }
	 | t = <MinInt>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.setNodeName (t.image) ; }
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BooleenLitteral()          : {/*@bgen(jjtree) Boolean */
                                    ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) Boolean */
        try {
/*@egen*/
	(
	   t = <False>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.setNodeName (t.image) ; }
	 | t = <True>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.setNodeName (t.image) ; }
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BooleanSet ()             : {/*@bgen(jjtree) BooleanSet */
  ASTBooleanSet jjtn000 = new ASTBooleanSet(JJTBOOLEANSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) BooleanSet */
        try {
/*@egen*/
	<Boolean>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void StringSet ()         : {/*@bgen(jjtree) STRING */
  ASTSTRING jjtn000 = new ASTSTRING(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) STRING */
        try {
/*@egen*/
	<StringSet>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void StringB ()          : {/*@bgen(jjtree) StringB */
                             ASTStringB jjtn000 = new ASTStringB(JJTSTRINGB);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t ; } {/*@bgen(jjtree) StringB */
        try {
/*@egen*/
	t = <String>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setNodeName (t.image) ; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Succ ()       : {/*@bgen(jjtree) Succ */
  ASTSucc jjtn000 = new ASTSucc(JJTSUCC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Succ */
        try {
/*@egen*/
	<Succ> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Pred()       : {/*@bgen(jjtree) Pred */
  ASTPred jjtn000 = new ASTPred(JJTPRED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Pred */
        try {
/*@egen*/
	<Pred> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Max ()      : {/*@bgen(jjtree) Max */
  ASTMax jjtn000 = new ASTMax(JJTMAX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Max */
        try {
/*@egen*/
	<Max> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Min ()      : {/*@bgen(jjtree) Min */
  ASTMin jjtn000 = new ASTMin(JJTMIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Min */
        try {
/*@egen*/
	<Min> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Card ()       : {/*@bgen(jjtree) Card */
  ASTCard jjtn000 = new ASTCard(JJTCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Card */
        try {
/*@egen*/
	<Card> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Pow ()           : {/*@bgen(jjtree) PowerSet */
  ASTPowerSet jjtn000 = new ASTPowerSet(JJTPOWERSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PowerSet */
        try {
/*@egen*/
	<POW> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Pow1 ()                  : {/*@bgen(jjtree) NonEmptySubsets */
  ASTNonEmptySubsets jjtn000 = new ASTNonEmptySubsets(JJTNONEMPTYSUBSETS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) NonEmptySubsets */
        try {
/*@egen*/
	<POW1> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Fin ()                 : {/*@bgen(jjtree) FinitePowerSet */
  ASTFinitePowerSet jjtn000 = new ASTFinitePowerSet(JJTFINITEPOWERSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) FinitePowerSet */
        try {
/*@egen*/
	<FIN> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Fin1 ()                        : {/*@bgen(jjtree) NonEmptyFiniteSubsets */
  ASTNonEmptyFiniteSubsets jjtn000 = new ASTNonEmptyFiniteSubsets(JJTNONEMPTYFINITESUBSETS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) NonEmptyFiniteSubsets */
        try {
/*@egen*/
	<FIN1> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Identity ()           : {/*@bgen(jjtree) Identity */
  ASTIdentity jjtn000 = new ASTIdentity(JJTIDENTITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Identity */
        try {
/*@egen*/
	<Id> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Prj1 ()       : {/*@bgen(jjtree) Prj1 */
  ASTPrj1 jjtn000 = new ASTPrj1(JJTPRJ1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Prj1 */
        try {
/*@egen*/
	<Prj1> <OpenParen> Expression() <Comma> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Prj2 ()       : {/*@bgen(jjtree) Prj2 */
  ASTPrj2 jjtn000 = new ASTPrj2(JJTPRJ2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Prj2 */
        try {
/*@egen*/
	<Prj2> <OpenParen> Expression() <Comma> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Iterate ()          : {/*@bgen(jjtree) Iterate */
  ASTIterate jjtn000 = new ASTIterate(JJTITERATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Iterate */
        try {
/*@egen*/
	<Iterate> <OpenParen> Expression() <Comma> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Closure ()          : {/*@bgen(jjtree) Closure */
  ASTClosure jjtn000 = new ASTClosure(JJTCLOSURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Closure */
        try {
/*@egen*/
	<Closure> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Closure1 ()           : {/*@bgen(jjtree) Closure1 */
  ASTClosure1 jjtn000 = new ASTClosure1(JJTCLOSURE1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Closure1 */
        try {
/*@egen*/
	<Closure1> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Domain ()         : {/*@bgen(jjtree) Domain */
  ASTDomain jjtn000 = new ASTDomain(JJTDOMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Domain */
          try {
/*@egen*/
	  <Dom> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Range ()        : {/*@bgen(jjtree) Range */
  ASTRange jjtn000 = new ASTRange(JJTRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Range */
          try {
/*@egen*/
	  <Ran> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Fnc ()      : {/*@bgen(jjtree) Fnc */
  ASTFnc jjtn000 = new ASTFnc(JJTFNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Fnc */
          try {
/*@egen*/
	  <Fnc> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Rel ()      : {/*@bgen(jjtree) Rel */
  ASTRel jjtn000 = new ASTRel(JJTREL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Rel */
          try {
/*@egen*/
	  <Rel> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Seq ()      : {/*@bgen(jjtree) Seq */
  ASTSeq jjtn000 = new ASTSeq(JJTSEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Seq */
          try {
/*@egen*/
	  <Seq> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Seq1 ()       : {/*@bgen(jjtree) Seq1 */
  ASTSeq1 jjtn000 = new ASTSeq1(JJTSEQ1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Seq1 */
          try {
/*@egen*/
	  <Seq1> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Iseq ()       : {/*@bgen(jjtree) Iseq */
  ASTIseq jjtn000 = new ASTIseq(JJTISEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Iseq */
          try {
/*@egen*/
	  <Iseq> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Iseq1 ()        : {/*@bgen(jjtree) Iseq1 */
  ASTIseq1 jjtn000 = new ASTIseq1(JJTISEQ1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Iseq1 */
          try {
/*@egen*/
	  <Iseq1> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Perm ()       : {/*@bgen(jjtree) Perm */
  ASTPerm jjtn000 = new ASTPerm(JJTPERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Perm */
          try {
/*@egen*/
	  <Perm> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Size ()       : {/*@bgen(jjtree) Size */
  ASTSize jjtn000 = new ASTSize(JJTSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Size */
          try {
/*@egen*/
	  <Size> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void First ()        : {/*@bgen(jjtree) First */
  ASTFirst jjtn000 = new ASTFirst(JJTFIRST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) First */
          try {
/*@egen*/
	  <First> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Last ()       : {/*@bgen(jjtree) Last */
  ASTLast jjtn000 = new ASTLast(JJTLAST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Last */
          try {
/*@egen*/
	  <Last> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Front ()        : {/*@bgen(jjtree) Front */
  ASTFront jjtn000 = new ASTFront(JJTFRONT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Front */
          try {
/*@egen*/
	  <Front> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Tail ()       : {/*@bgen(jjtree) Tail */
  ASTTail jjtn000 = new ASTTail(JJTTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Tail */
          try {
/*@egen*/
	  <Tail> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Rev ()      : {/*@bgen(jjtree) Rev */
  ASTRev jjtn000 = new ASTRev(JJTREV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Rev */
          try {
/*@egen*/
	  <Rev> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Conc ()       : {/*@bgen(jjtree) Conc */
  ASTConc jjtn000 = new ASTConc(JJTCONC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Conc */
          try {
/*@egen*/
	  <Conc> <OpenParen> Expression() <CloseParen>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void IdentifierB() : {} {
	LOOKAHEAD(DollarZero()) DollarZero()
	| IdentifierComposed() 
}

void DollarZero()             : {/*@bgen(jjtree) DollarZero */
  ASTDollarZero jjtn000 = new ASTDollarZero(JJTDOLLARZERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) DollarZero */
        try {
/*@egen*/
	IdentifierComposed() <DollarZero>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EmptySet()           : {/*@bgen(jjtree) EmptySet */
  ASTEmptySet jjtn000 = new ASTEmptySet(JJTEMPTYSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) EmptySet */
        try {
/*@egen*/
	<EmptySet>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ComprehensionSet()                   : {/*@bgen(jjtree) ComprehensionSet */
  ASTComprehensionSet jjtn000 = new ASTComprehensionSet(JJTCOMPREHENSIONSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ComprehensionSet */
        try {
/*@egen*/
	<OpenBraces> PereListIdent() <SuchAs> Predicate() <CloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExtensionSet()               : {/*@bgen(jjtree) ExtensionSet */
  ASTExtensionSet jjtn000 = new ASTExtensionSet(JJTEXTENSIONSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ExtensionSet */
        try {
/*@egen*/
	<OpenBraces> PereListExpression() <CloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PereListIdent() : {} {
 	CallDefinitionListExpression() | ListIdent()
}

void ListIdent()            : {/*@bgen(jjtree) ListIdent */
  ASTListIdent jjtn000 = new ASTListIdent(JJTLISTIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ListIdent */
        try {
/*@egen*/
 	IdentifierComposed () (<Comma> IdentifierComposed())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void PereListExpression() : {} {
 	CallDefinitionListExpression() | ListExpression()
}

void ListExpression()                 : {/*@bgen(jjtree) ListExpression */
  ASTListExpression jjtn000 = new ASTListExpression(JJTLISTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ListExpression */
        try {
/*@egen*/
 	Expression () (<Comma> Expression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListParametresDef()                     : {/*@bgen(jjtree) ListParametresDefs */
  ASTListParametresDefs jjtn000 = new ASTListParametresDefs(JJTLISTPARAMETRESDEFS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ListParametresDefs */
        try {
/*@egen*/
 	(IdentifierComposed() | EntierLitteral()) (<Comma> IdentifierComposed() | EntierLitteral())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void CallDefinitionSubstitution()                             : {/*@bgen(jjtree) CallDefinitionSubstitution */
  ASTCallDefinitionSubstitution jjtn000 = new ASTCallDefinitionSubstitution(JJTCALLDEFINITIONSUBSTITUTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) CallDefinitionSubstitution */
        try {
/*@egen*/
	LOOKAHEAD ( { definitions.containsKey(getToken(1).image) && definitions.get(getToken(1).image).equals("Substitution") } ) 
	  Identifier() [<OpenParen> ListParametresDef() <CloseParen>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CallDefinitionPredicate()                          : {/*@bgen(jjtree) CallDefinitionPredicate */
  ASTCallDefinitionPredicate jjtn000 = new ASTCallDefinitionPredicate(JJTCALLDEFINITIONPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) CallDefinitionPredicate */
        try {
/*@egen*/
	LOOKAHEAD ( { definitions.containsKey(getToken(1).image) && definitions.get(getToken(1).image).equals("Predicate")  } ) 
	  Identifier() [<OpenParen> ListParametresDef() <CloseParen>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CallDefinitionListExpression()                               : {/*@bgen(jjtree) CallDefinitionListExpression */
  ASTCallDefinitionListExpression jjtn000 = new ASTCallDefinitionListExpression(JJTCALLDEFINITIONLISTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) CallDefinitionListExpression */
        try {
/*@egen*/
	LOOKAHEAD ( { definitions.containsKey(getToken(1).image) && definitions.get(getToken(1).image).equals("ListExpression")  } ) 
	  Identifier() [<OpenParen> ListParametresDef() <CloseParen>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CallDefinitionExpression()                           : {/*@bgen(jjtree) CallDefinitionExpression */
  ASTCallDefinitionExpression jjtn000 = new ASTCallDefinitionExpression(JJTCALLDEFINITIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) CallDefinitionExpression */
        try {
/*@egen*/
	LOOKAHEAD ( { definitions.containsKey(getToken(1).image) && definitions.get(getToken(1).image).equals("Expression")  } ) 
	  Identifier() [<OpenParen> ListParametresDef() <CloseParen>]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Identifier()             : {/*@bgen(jjtree) Identifier */
                                  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.setNodeName (t.image) ; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IdentifierComposed()                     : {/*@bgen(jjtree) IdentifierComposed */
  ASTIdentifierComposed jjtn000 = new ASTIdentifierComposed(JJTIDENTIFIERCOMPOSED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) IdentifierComposed */
        try {
/*@egen*/
	Identifier() (<Point> Identifier())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}